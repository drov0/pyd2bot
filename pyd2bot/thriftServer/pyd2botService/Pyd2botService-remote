#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from pyd2botService import Pyd2botService
from pyd2botService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string ping()')
    print('   fetchCharacters(string token)')
    print('   fetchUsedServers(string token)')
    print('  void runSession(string token, Session session)')
    print('   fetchBreedSpells(int breedId)')
    print('  string fetchJobsInfosJson()')
    print('  bool deleteCharacter(string token, int serverId, int characterId)')
    print('  Character createCharacter(string token, int serverId, string name, int breedId, bool sex, bool moveOutOfIncarnam)')
    print('   getBreeds()')
    print('   getServers(string token)')
    print('  CharacterDetails fetchCharacterDetails(string token, i32 serverId, i32 characterId)')
    print('  bool addSession(Session session)')
    print('  bool startSession(Session session)')
    print('  bool stopSession(string sessionId)')
    print('   getRunSummary()')
    print('  RunSummary getCharacterRunSummary(string login)')
    print('   getSessionRunSummary(string sessionId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Pyd2botService.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'fetchCharacters':
    if len(args) != 1:
        print('fetchCharacters requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchCharacters(args[0],))

elif cmd == 'fetchUsedServers':
    if len(args) != 1:
        print('fetchUsedServers requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchUsedServers(args[0],))

elif cmd == 'runSession':
    if len(args) != 2:
        print('runSession requires 2 args')
        sys.exit(1)
    pp.pprint(client.runSession(args[0], eval(args[1]),))

elif cmd == 'fetchBreedSpells':
    if len(args) != 1:
        print('fetchBreedSpells requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchBreedSpells(eval(args[0]),))

elif cmd == 'fetchJobsInfosJson':
    if len(args) != 0:
        print('fetchJobsInfosJson requires 0 args')
        sys.exit(1)
    pp.pprint(client.fetchJobsInfosJson())

elif cmd == 'deleteCharacter':
    if len(args) != 3:
        print('deleteCharacter requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteCharacter(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'createCharacter':
    if len(args) != 6:
        print('createCharacter requires 6 args')
        sys.exit(1)
    pp.pprint(client.createCharacter(args[0], eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'getBreeds':
    if len(args) != 0:
        print('getBreeds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBreeds())

elif cmd == 'getServers':
    if len(args) != 1:
        print('getServers requires 1 args')
        sys.exit(1)
    pp.pprint(client.getServers(args[0],))

elif cmd == 'fetchCharacterDetails':
    if len(args) != 3:
        print('fetchCharacterDetails requires 3 args')
        sys.exit(1)
    pp.pprint(client.fetchCharacterDetails(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'addSession':
    if len(args) != 1:
        print('addSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.addSession(eval(args[0]),))

elif cmd == 'startSession':
    if len(args) != 1:
        print('startSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.startSession(eval(args[0]),))

elif cmd == 'stopSession':
    if len(args) != 1:
        print('stopSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopSession(args[0],))

elif cmd == 'getRunSummary':
    if len(args) != 0:
        print('getRunSummary requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRunSummary())

elif cmd == 'getCharacterRunSummary':
    if len(args) != 1:
        print('getCharacterRunSummary requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCharacterRunSummary(args[0],))

elif cmd == 'getSessionRunSummary':
    if len(args) != 1:
        print('getSessionRunSummary requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSessionRunSummary(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
