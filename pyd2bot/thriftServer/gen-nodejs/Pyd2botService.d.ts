//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./pyd2botService_types');
import SessionStatus = ttypes.SessionStatus
import SessionType = ttypes.SessionType
import TransitionType = ttypes.TransitionType
import UnloadType = ttypes.UnloadType
import PathType = ttypes.PathType
import DofusError = ttypes.DofusError
import Vertex = ttypes.Vertex
import JobFilter = ttypes.JobFilter
import RunSummary = ttypes.RunSummary
import CharacterDetails = ttypes.CharacterDetails
import Server = ttypes.Server
import Breed = ttypes.Breed
import Path = ttypes.Path
import Spell = ttypes.Spell
import Character = ttypes.Character
import Certificate = ttypes.Certificate
import Session = ttypes.Session

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    ping(): Promise<string>;

    ping(callback?: (error: ttypes.DofusError, response: string)=>void): void;

    fetchCharacters(token: string): Promise<Character[]>;

    fetchCharacters(token: string, callback?: (error: ttypes.DofusError, response: Character[])=>void): void;

    fetchUsedServers(token: string): Promise<Server[]>;

    fetchUsedServers(token: string, callback?: (error: ttypes.DofusError, response: Server[])=>void): void;

    runSession(token: string, session: Session): Promise<void>;

    runSession(token: string, session: Session, callback?: (error: ttypes.DofusError, response: void)=>void): void;

    fetchBreedSpells(breedId: number): Promise<Spell[]>;

    fetchBreedSpells(breedId: number, callback?: (error: ttypes.DofusError, response: Spell[])=>void): void;

    fetchJobsInfosJson(): Promise<string>;

    fetchJobsInfosJson(callback?: (error: ttypes.DofusError, response: string)=>void): void;

    deleteCharacter(token: string, serverId: number, characterId: number): Promise<boolean>;

    deleteCharacter(token: string, serverId: number, characterId: number, callback?: (error: ttypes.DofusError, response: boolean)=>void): void;

    createCharacter(token: string, serverId: number, name: string, breedId: number, sex: boolean, moveOutOfIncarnam: boolean): Promise<Character>;

    createCharacter(token: string, serverId: number, name: string, breedId: number, sex: boolean, moveOutOfIncarnam: boolean, callback?: (error: ttypes.DofusError, response: Character)=>void): void;

    getBreeds(): Promise<Breed[]>;

    getBreeds(callback?: (error: ttypes.DofusError, response: Breed[])=>void): void;

    getServers(token: string): Promise<Server[]>;

    getServers(token: string, callback?: (error: ttypes.DofusError, response: Server[])=>void): void;

    fetchCharacterDetails(token: string, serverId: number, characterId: number): Promise<CharacterDetails>;

    fetchCharacterDetails(token: string, serverId: number, characterId: number, callback?: (error: ttypes.DofusError, response: CharacterDetails)=>void): void;

    addSession(session: Session): Promise<boolean>;

    addSession(session: Session, callback?: (error: ttypes.DofusError, response: boolean)=>void): void;

    startSession(session: Session): Promise<boolean>;

    startSession(session: Session, callback?: (error: ttypes.DofusError, response: boolean)=>void): void;

    stopSession(sessionId: string): Promise<boolean>;

    stopSession(sessionId: string, callback?: (error: ttypes.DofusError, response: boolean)=>void): void;

    getRunSummary(): Promise<RunSummary[]>;

    getRunSummary(callback?: (error: ttypes.DofusError, response: RunSummary[])=>void): void;

    getCharacterRunSummary(login: string): Promise<RunSummary>;

    getCharacterRunSummary(login: string, callback?: (error: ttypes.DofusError, response: RunSummary)=>void): void;

    getSessionRunSummary(sessionId: string): Promise<RunSummary[]>;

    getSessionRunSummary(sessionId: string, callback?: (error: ttypes.DofusError, response: RunSummary[])=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_ping(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchCharacters(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchUsedServers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_runSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchBreedSpells(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchJobsInfosJson(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deleteCharacter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createCharacter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBreeds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getServers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchCharacterDetails(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_addSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_startSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_stopSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRunSummary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCharacterRunSummary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSessionRunSummary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
