//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
ttypes.SessionStatus = {
  '0' : 'CRASHED',
  'CRASHED' : 0,
  '1' : 'TERMINATED',
  'TERMINATED' : 1,
  '2' : 'RUNNING',
  'RUNNING' : 2,
  '3' : 'DISCONNECTED',
  'DISCONNECTED' : 3,
  '4' : 'AUTHENTICATING',
  'AUTHENTICATING' : 4,
  '5' : 'FIGHTING',
  'FIGHTING' : 5,
  '6' : 'ROLEPLAYING',
  'ROLEPLAYING' : 6,
  '7' : 'LOADING_MAP',
  'LOADING_MAP' : 7,
  '8' : 'PROCESSING_MAP',
  'PROCESSING_MAP' : 8,
  '9' : 'OUT_OF_ROLEPLAY',
  'OUT_OF_ROLEPLAY' : 9,
  '10' : 'IDLE',
  'IDLE' : 10
};
ttypes.SessionType = {
  '0' : 'FIGHT',
  'FIGHT' : 0,
  '1' : 'FARM',
  'FARM' : 1,
  '3' : 'SELL',
  'SELL' : 3,
  '4' : 'TREASURE_HUNT',
  'TREASURE_HUNT' : 4,
  '5' : 'MIXED',
  'MIXED' : 5
};
ttypes.TransitionType = {
  '1' : 'SCROLL',
  'SCROLL' : 1,
  '2' : 'SCROLL_ACTION',
  'SCROLL_ACTION' : 2,
  '4' : 'MAP_EVENT',
  'MAP_EVENT' : 4,
  '8' : 'MAP_ACTION',
  'MAP_ACTION' : 8,
  '16' : 'MAP_OBSTACLE',
  'MAP_OBSTACLE' : 16,
  '32' : 'INTERACTIVE',
  'INTERACTIVE' : 32,
  '64' : 'NPC_ACTION',
  'NPC_ACTION' : 64
};
ttypes.UnloadType = {
  '0' : 'BANK',
  'BANK' : 0,
  '1' : 'STORAGE',
  'STORAGE' : 1,
  '2' : 'SELLER',
  'SELLER' : 2
};
ttypes.PathType = {
  '0' : 'RandomSubAreaFarmPath',
  'RandomSubAreaFarmPath' : 0,
  '2' : 'RandomAreaFarmPath',
  'RandomAreaFarmPath' : 2,
  '1' : 'CyclicFarmPath',
  'CyclicFarmPath' : 1
};
const Vertex = module.exports.Vertex = class {
  constructor(args) {
    this.mapId = null;
    this.zoneId = null;
    this.onlyDirections = null;
    if (args) {
      if (args.mapId !== undefined && args.mapId !== null) {
        this.mapId = args.mapId;
      }
      if (args.zoneId !== undefined && args.zoneId !== null) {
        this.zoneId = args.zoneId;
      }
      if (args.onlyDirections !== undefined && args.onlyDirections !== null) {
        this.onlyDirections = args.onlyDirections;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.mapId = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.zoneId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.onlyDirections = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Vertex');
    if (this.mapId !== null && this.mapId !== undefined) {
      output.writeFieldBegin('mapId', Thrift.Type.DOUBLE, 1);
      output.writeDouble(this.mapId);
      output.writeFieldEnd();
    }
    if (this.zoneId !== null && this.zoneId !== undefined) {
      output.writeFieldBegin('zoneId', Thrift.Type.I32, 2);
      output.writeI32(this.zoneId);
      output.writeFieldEnd();
    }
    if (this.onlyDirections !== null && this.onlyDirections !== undefined) {
      output.writeFieldBegin('onlyDirections', Thrift.Type.BOOL, 3);
      output.writeBool(this.onlyDirections);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const JobFilter = module.exports.JobFilter = class {
  constructor(args) {
    this.jobId = null;
    this.resoursesIds = null;
    if (args) {
      if (args.jobId !== undefined && args.jobId !== null) {
        this.jobId = args.jobId;
      }
      if (args.resoursesIds !== undefined && args.resoursesIds !== null) {
        this.resoursesIds = Thrift.copyList(args.resoursesIds, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.jobId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.resoursesIds = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readI32();
            this.resoursesIds.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('JobFilter');
    if (this.jobId !== null && this.jobId !== undefined) {
      output.writeFieldBegin('jobId', Thrift.Type.I32, 1);
      output.writeI32(this.jobId);
      output.writeFieldEnd();
    }
    if (this.resoursesIds !== null && this.resoursesIds !== undefined) {
      output.writeFieldBegin('resoursesIds', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.resoursesIds.length);
      for (let iter4 in this.resoursesIds) {
        if (this.resoursesIds.hasOwnProperty(iter4)) {
          iter4 = this.resoursesIds[iter4];
          output.writeI32(iter4);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RunSummary = module.exports.RunSummary = class {
  constructor(args) {
    this.login = null;
    this.startTime = null;
    this.totalRunTime = null;
    this.sessionId = null;
    this.leaderLogin = null;
    this.numberOfRestarts = null;
    this.status = null;
    this.statusReason = null;
    this.earnedKamas = null;
    this.nbrFightsDone = null;
    this.earnedLevels = null;
    if (args) {
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.startTime !== undefined && args.startTime !== null) {
        this.startTime = args.startTime;
      }
      if (args.totalRunTime !== undefined && args.totalRunTime !== null) {
        this.totalRunTime = args.totalRunTime;
      }
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.leaderLogin !== undefined && args.leaderLogin !== null) {
        this.leaderLogin = args.leaderLogin;
      }
      if (args.numberOfRestarts !== undefined && args.numberOfRestarts !== null) {
        this.numberOfRestarts = args.numberOfRestarts;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.statusReason !== undefined && args.statusReason !== null) {
        this.statusReason = args.statusReason;
      }
      if (args.earnedKamas !== undefined && args.earnedKamas !== null) {
        this.earnedKamas = args.earnedKamas;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field earnedKamas is unset!');
      }
      if (args.nbrFightsDone !== undefined && args.nbrFightsDone !== null) {
        this.nbrFightsDone = args.nbrFightsDone;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nbrFightsDone is unset!');
      }
      if (args.earnedLevels !== undefined && args.earnedLevels !== null) {
        this.earnedLevels = args.earnedLevels;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field earnedLevels is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.startTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.totalRunTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.leaderLogin = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.numberOfRestarts = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.status = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.statusReason = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.earnedKamas = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.nbrFightsDone = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.earnedLevels = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RunSummary');
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 1);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
      output.writeFieldBegin('startTime', Thrift.Type.I64, 2);
      output.writeI64(this.startTime);
      output.writeFieldEnd();
    }
    if (this.totalRunTime !== null && this.totalRunTime !== undefined) {
      output.writeFieldBegin('totalRunTime', Thrift.Type.I64, 3);
      output.writeI64(this.totalRunTime);
      output.writeFieldEnd();
    }
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 4);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.leaderLogin !== null && this.leaderLogin !== undefined) {
      output.writeFieldBegin('leaderLogin', Thrift.Type.STRING, 5);
      output.writeString(this.leaderLogin);
      output.writeFieldEnd();
    }
    if (this.numberOfRestarts !== null && this.numberOfRestarts !== undefined) {
      output.writeFieldBegin('numberOfRestarts', Thrift.Type.I32, 6);
      output.writeI32(this.numberOfRestarts);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRING, 7);
      output.writeString(this.status);
      output.writeFieldEnd();
    }
    if (this.statusReason !== null && this.statusReason !== undefined) {
      output.writeFieldBegin('statusReason', Thrift.Type.STRING, 8);
      output.writeString(this.statusReason);
      output.writeFieldEnd();
    }
    if (this.earnedKamas !== null && this.earnedKamas !== undefined) {
      output.writeFieldBegin('earnedKamas', Thrift.Type.I32, 9);
      output.writeI32(this.earnedKamas);
      output.writeFieldEnd();
    }
    if (this.nbrFightsDone !== null && this.nbrFightsDone !== undefined) {
      output.writeFieldBegin('nbrFightsDone', Thrift.Type.I32, 10);
      output.writeI32(this.nbrFightsDone);
      output.writeFieldEnd();
    }
    if (this.earnedLevels !== null && this.earnedLevels !== undefined) {
      output.writeFieldBegin('earnedLevels', Thrift.Type.I32, 11);
      output.writeI32(this.earnedLevels);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CharacterDetails = module.exports.CharacterDetails = class {
  constructor(args) {
    this.level = null;
    this.hp = null;
    this.vertex = null;
    this.kamas = null;
    this.areaName = null;
    this.subAreaName = null;
    this.cellId = null;
    this.mapX = null;
    this.mapY = null;
    this.inventoryWeight = null;
    this.shopWeight = null;
    this.inventoryWeightMax = null;
    if (args) {
      if (args.level !== undefined && args.level !== null) {
        this.level = args.level;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field level is unset!');
      }
      if (args.hp !== undefined && args.hp !== null) {
        this.hp = args.hp;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hp is unset!');
      }
      if (args.vertex !== undefined && args.vertex !== null) {
        this.vertex = new ttypes.Vertex(args.vertex);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vertex is unset!');
      }
      if (args.kamas !== undefined && args.kamas !== null) {
        this.kamas = args.kamas;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kamas is unset!');
      }
      if (args.areaName !== undefined && args.areaName !== null) {
        this.areaName = args.areaName;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field areaName is unset!');
      }
      if (args.subAreaName !== undefined && args.subAreaName !== null) {
        this.subAreaName = args.subAreaName;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subAreaName is unset!');
      }
      if (args.cellId !== undefined && args.cellId !== null) {
        this.cellId = args.cellId;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cellId is unset!');
      }
      if (args.mapX !== undefined && args.mapX !== null) {
        this.mapX = args.mapX;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mapX is unset!');
      }
      if (args.mapY !== undefined && args.mapY !== null) {
        this.mapY = args.mapY;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mapY is unset!');
      }
      if (args.inventoryWeight !== undefined && args.inventoryWeight !== null) {
        this.inventoryWeight = args.inventoryWeight;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field inventoryWeight is unset!');
      }
      if (args.shopWeight !== undefined && args.shopWeight !== null) {
        this.shopWeight = args.shopWeight;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shopWeight is unset!');
      }
      if (args.inventoryWeightMax !== undefined && args.inventoryWeightMax !== null) {
        this.inventoryWeightMax = args.inventoryWeightMax;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field inventoryWeightMax is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.level = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.hp = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.vertex = new ttypes.Vertex();
          this.vertex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.kamas = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.areaName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.subAreaName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.cellId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.mapX = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.mapY = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.inventoryWeight = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.shopWeight = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.inventoryWeightMax = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CharacterDetails');
    if (this.level !== null && this.level !== undefined) {
      output.writeFieldBegin('level', Thrift.Type.I32, 1);
      output.writeI32(this.level);
      output.writeFieldEnd();
    }
    if (this.hp !== null && this.hp !== undefined) {
      output.writeFieldBegin('hp', Thrift.Type.I32, 2);
      output.writeI32(this.hp);
      output.writeFieldEnd();
    }
    if (this.vertex !== null && this.vertex !== undefined) {
      output.writeFieldBegin('vertex', Thrift.Type.STRUCT, 3);
      this.vertex.write(output);
      output.writeFieldEnd();
    }
    if (this.kamas !== null && this.kamas !== undefined) {
      output.writeFieldBegin('kamas', Thrift.Type.I64, 4);
      output.writeI64(this.kamas);
      output.writeFieldEnd();
    }
    if (this.areaName !== null && this.areaName !== undefined) {
      output.writeFieldBegin('areaName', Thrift.Type.STRING, 5);
      output.writeString(this.areaName);
      output.writeFieldEnd();
    }
    if (this.subAreaName !== null && this.subAreaName !== undefined) {
      output.writeFieldBegin('subAreaName', Thrift.Type.STRING, 6);
      output.writeString(this.subAreaName);
      output.writeFieldEnd();
    }
    if (this.cellId !== null && this.cellId !== undefined) {
      output.writeFieldBegin('cellId', Thrift.Type.I32, 7);
      output.writeI32(this.cellId);
      output.writeFieldEnd();
    }
    if (this.mapX !== null && this.mapX !== undefined) {
      output.writeFieldBegin('mapX', Thrift.Type.I32, 8);
      output.writeI32(this.mapX);
      output.writeFieldEnd();
    }
    if (this.mapY !== null && this.mapY !== undefined) {
      output.writeFieldBegin('mapY', Thrift.Type.I32, 9);
      output.writeI32(this.mapY);
      output.writeFieldEnd();
    }
    if (this.inventoryWeight !== null && this.inventoryWeight !== undefined) {
      output.writeFieldBegin('inventoryWeight', Thrift.Type.I32, 10);
      output.writeI32(this.inventoryWeight);
      output.writeFieldEnd();
    }
    if (this.shopWeight !== null && this.shopWeight !== undefined) {
      output.writeFieldBegin('shopWeight', Thrift.Type.I32, 11);
      output.writeI32(this.shopWeight);
      output.writeFieldEnd();
    }
    if (this.inventoryWeightMax !== null && this.inventoryWeightMax !== undefined) {
      output.writeFieldBegin('inventoryWeightMax', Thrift.Type.I32, 12);
      output.writeI32(this.inventoryWeightMax);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Server = module.exports.Server = class {
  constructor(args) {
    this.id = null;
    this.name = null;
    this.status = null;
    this.completion = null;
    this.charactersCount = null;
    this.charactersSlots = null;
    this.date = null;
    this.isMonoAccount = null;
    this.isSelectable = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.completion !== undefined && args.completion !== null) {
        this.completion = args.completion;
      }
      if (args.charactersCount !== undefined && args.charactersCount !== null) {
        this.charactersCount = args.charactersCount;
      }
      if (args.charactersSlots !== undefined && args.charactersSlots !== null) {
        this.charactersSlots = args.charactersSlots;
      }
      if (args.date !== undefined && args.date !== null) {
        this.date = args.date;
      }
      if (args.isMonoAccount !== undefined && args.isMonoAccount !== null) {
        this.isMonoAccount = args.isMonoAccount;
      }
      if (args.isSelectable !== undefined && args.isSelectable !== null) {
        this.isSelectable = args.isSelectable;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.completion = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.charactersCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.charactersSlots = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.DOUBLE) {
          this.date = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.isMonoAccount = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.isSelectable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Server');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I32, 1);
      output.writeI32(this.id);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 3);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.completion !== null && this.completion !== undefined) {
      output.writeFieldBegin('completion', Thrift.Type.I32, 4);
      output.writeI32(this.completion);
      output.writeFieldEnd();
    }
    if (this.charactersCount !== null && this.charactersCount !== undefined) {
      output.writeFieldBegin('charactersCount', Thrift.Type.I32, 5);
      output.writeI32(this.charactersCount);
      output.writeFieldEnd();
    }
    if (this.charactersSlots !== null && this.charactersSlots !== undefined) {
      output.writeFieldBegin('charactersSlots', Thrift.Type.I32, 6);
      output.writeI32(this.charactersSlots);
      output.writeFieldEnd();
    }
    if (this.date !== null && this.date !== undefined) {
      output.writeFieldBegin('date', Thrift.Type.DOUBLE, 7);
      output.writeDouble(this.date);
      output.writeFieldEnd();
    }
    if (this.isMonoAccount !== null && this.isMonoAccount !== undefined) {
      output.writeFieldBegin('isMonoAccount', Thrift.Type.BOOL, 8);
      output.writeBool(this.isMonoAccount);
      output.writeFieldEnd();
    }
    if (this.isSelectable !== null && this.isSelectable !== undefined) {
      output.writeFieldBegin('isSelectable', Thrift.Type.BOOL, 9);
      output.writeBool(this.isSelectable);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Breed = module.exports.Breed = class {
  constructor(args) {
    this.id = null;
    this.name = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Breed');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I32, 1);
      output.writeI32(this.id);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Path = module.exports.Path = class {
  constructor(args) {
    this.id = null;
    this.type = null;
    this.startVertex = null;
    this.transitionTypeWhitelist = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.startVertex !== undefined && args.startVertex !== null) {
        this.startVertex = new ttypes.Vertex(args.startVertex);
      }
      if (args.transitionTypeWhitelist !== undefined && args.transitionTypeWhitelist !== null) {
        this.transitionTypeWhitelist = Thrift.copyList(args.transitionTypeWhitelist, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.startVertex = new ttypes.Vertex();
          this.startVertex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.transitionTypeWhitelist = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = input.readI32();
            this.transitionTypeWhitelist.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Path');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 2);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.startVertex !== null && this.startVertex !== undefined) {
      output.writeFieldBegin('startVertex', Thrift.Type.STRUCT, 3);
      this.startVertex.write(output);
      output.writeFieldEnd();
    }
    if (this.transitionTypeWhitelist !== null && this.transitionTypeWhitelist !== undefined) {
      output.writeFieldBegin('transitionTypeWhitelist', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.I32, this.transitionTypeWhitelist.length);
      for (let iter9 in this.transitionTypeWhitelist) {
        if (this.transitionTypeWhitelist.hasOwnProperty(iter9)) {
          iter9 = this.transitionTypeWhitelist[iter9];
          output.writeI32(iter9);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Spell = module.exports.Spell = class {
  constructor(args) {
    this.id = null;
    this.name = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Spell');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I32, 1);
      output.writeI32(this.id);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Character = module.exports.Character = class {
  constructor(args) {
    this.name = null;
    this.id = null;
    this.level = null;
    this.breedId = null;
    this.breedName = null;
    this.serverId = null;
    this.serverName = null;
    this.login = null;
    this.accountId = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.level !== undefined && args.level !== null) {
        this.level = args.level;
      }
      if (args.breedId !== undefined && args.breedId !== null) {
        this.breedId = args.breedId;
      }
      if (args.breedName !== undefined && args.breedName !== null) {
        this.breedName = args.breedName;
      }
      if (args.serverId !== undefined && args.serverId !== null) {
        this.serverId = args.serverId;
      }
      if (args.serverName !== undefined && args.serverName !== null) {
        this.serverName = args.serverName;
      }
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.accountId !== undefined && args.accountId !== null) {
        this.accountId = args.accountId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.id = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.level = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.breedId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.breedName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.serverId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.serverName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.accountId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Character');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.id);
      output.writeFieldEnd();
    }
    if (this.level !== null && this.level !== undefined) {
      output.writeFieldBegin('level', Thrift.Type.I32, 3);
      output.writeI32(this.level);
      output.writeFieldEnd();
    }
    if (this.breedId !== null && this.breedId !== undefined) {
      output.writeFieldBegin('breedId', Thrift.Type.I32, 4);
      output.writeI32(this.breedId);
      output.writeFieldEnd();
    }
    if (this.breedName !== null && this.breedName !== undefined) {
      output.writeFieldBegin('breedName', Thrift.Type.STRING, 5);
      output.writeString(this.breedName);
      output.writeFieldEnd();
    }
    if (this.serverId !== null && this.serverId !== undefined) {
      output.writeFieldBegin('serverId', Thrift.Type.I32, 6);
      output.writeI32(this.serverId);
      output.writeFieldEnd();
    }
    if (this.serverName !== null && this.serverName !== undefined) {
      output.writeFieldBegin('serverName', Thrift.Type.STRING, 7);
      output.writeString(this.serverName);
      output.writeFieldEnd();
    }
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 8);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.accountId !== null && this.accountId !== undefined) {
      output.writeFieldBegin('accountId', Thrift.Type.I32, 9);
      output.writeI32(this.accountId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Session = module.exports.Session = class {
  constructor(args) {
    this.id = null;
    this.leader = null;
    this.followers = null;
    this.type = null;
    this.unloadType = null;
    this.seller = null;
    this.path = null;
    this.monsterLvlCoefDiff = null;
    this.jobFilters = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.leader !== undefined && args.leader !== null) {
        this.leader = new ttypes.Character(args.leader);
      }
      if (args.followers !== undefined && args.followers !== null) {
        this.followers = Thrift.copyList(args.followers, [ttypes.Character]);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.unloadType !== undefined && args.unloadType !== null) {
        this.unloadType = args.unloadType;
      }
      if (args.seller !== undefined && args.seller !== null) {
        this.seller = new ttypes.Character(args.seller);
      }
      if (args.path !== undefined && args.path !== null) {
        this.path = new ttypes.Path(args.path);
      }
      if (args.monsterLvlCoefDiff !== undefined && args.monsterLvlCoefDiff !== null) {
        this.monsterLvlCoefDiff = args.monsterLvlCoefDiff;
      }
      if (args.jobFilters !== undefined && args.jobFilters !== null) {
        this.jobFilters = Thrift.copyList(args.jobFilters, [ttypes.JobFilter]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.leader = new ttypes.Character();
          this.leader.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.followers = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new ttypes.Character();
            elem13.read(input);
            this.followers.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.unloadType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.seller = new ttypes.Character();
          this.seller.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.path = new ttypes.Path();
          this.path.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.DOUBLE) {
          this.monsterLvlCoefDiff = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.jobFilters = [];
          const _rtmp315 = input.readListBegin();
          const _size14 = _rtmp315.size || 0;
          for (let _i16 = 0; _i16 < _size14; ++_i16) {
            let elem17 = null;
            elem17 = new ttypes.JobFilter();
            elem17.read(input);
            this.jobFilters.push(elem17);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Session');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.leader !== null && this.leader !== undefined) {
      output.writeFieldBegin('leader', Thrift.Type.STRUCT, 2);
      this.leader.write(output);
      output.writeFieldEnd();
    }
    if (this.followers !== null && this.followers !== undefined) {
      output.writeFieldBegin('followers', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.followers.length);
      for (let iter18 in this.followers) {
        if (this.followers.hasOwnProperty(iter18)) {
          iter18 = this.followers[iter18];
          iter18.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.unloadType !== null && this.unloadType !== undefined) {
      output.writeFieldBegin('unloadType', Thrift.Type.I32, 5);
      output.writeI32(this.unloadType);
      output.writeFieldEnd();
    }
    if (this.seller !== null && this.seller !== undefined) {
      output.writeFieldBegin('seller', Thrift.Type.STRUCT, 6);
      this.seller.write(output);
      output.writeFieldEnd();
    }
    if (this.path !== null && this.path !== undefined) {
      output.writeFieldBegin('path', Thrift.Type.STRUCT, 7);
      this.path.write(output);
      output.writeFieldEnd();
    }
    if (this.monsterLvlCoefDiff !== null && this.monsterLvlCoefDiff !== undefined) {
      output.writeFieldBegin('monsterLvlCoefDiff', Thrift.Type.DOUBLE, 8);
      output.writeDouble(this.monsterLvlCoefDiff);
      output.writeFieldEnd();
    }
    if (this.jobFilters !== null && this.jobFilters !== undefined) {
      output.writeFieldBegin('jobFilters', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRUCT, this.jobFilters.length);
      for (let iter19 in this.jobFilters) {
        if (this.jobFilters.hasOwnProperty(iter19)) {
          iter19 = this.jobFilters[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const DofusError = module.exports.DofusError = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "DofusError";
    this.code = null;
    this.message = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DofusError');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 2);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
