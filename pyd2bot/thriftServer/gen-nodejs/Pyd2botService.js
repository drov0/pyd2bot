//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./pyd2botService_types');
//HELPER FUNCTIONS AND STRUCTURES

const Pyd2botService_ping_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_ping_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_ping_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_ping_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchCharacters_args = class {
  constructor(args) {
    this.token = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchCharacters_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchCharacters_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Character]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new ttypes.Character();
            elem23.read(input);
            this.success.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchCharacters_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter24 in this.success) {
        if (this.success.hasOwnProperty(iter24)) {
          iter24 = this.success[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchUsedServers_args = class {
  constructor(args) {
    this.token = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchUsedServers_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchUsedServers_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Server]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new ttypes.Server();
            elem28.read(input);
            this.success.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchUsedServers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter29 in this.success) {
        if (this.success.hasOwnProperty(iter29)) {
          iter29 = this.success[iter29];
          iter29.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_runSession_args = class {
  constructor(args) {
    this.token = null;
    this.session = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.session !== undefined && args.session !== null) {
        this.session = new ttypes.Session(args.session);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.session = new ttypes.Session();
          this.session.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_runSession_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRUCT, 6);
      this.session.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_runSession_result = class {
  constructor(args) {
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_runSession_result');
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchBreedSpells_args = class {
  constructor(args) {
    this.breedId = null;
    if (args) {
      if (args.breedId !== undefined && args.breedId !== null) {
        this.breedId = args.breedId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.breedId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchBreedSpells_args');
    if (this.breedId !== null && this.breedId !== undefined) {
      output.writeFieldBegin('breedId', Thrift.Type.I32, 1);
      output.writeI32(this.breedId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchBreedSpells_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Spell]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = new ttypes.Spell();
            elem33.read(input);
            this.success.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchBreedSpells_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter34 in this.success) {
        if (this.success.hasOwnProperty(iter34)) {
          iter34 = this.success[iter34];
          iter34.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchJobsInfosJson_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchJobsInfosJson_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchJobsInfosJson_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchJobsInfosJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_deleteCharacter_args = class {
  constructor(args) {
    this.token = null;
    this.serverId = null;
    this.characterId = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.serverId !== undefined && args.serverId !== null) {
        this.serverId = args.serverId;
      }
      if (args.characterId !== undefined && args.characterId !== null) {
        this.characterId = args.characterId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.serverId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.characterId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_deleteCharacter_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.serverId !== null && this.serverId !== undefined) {
      output.writeFieldBegin('serverId', Thrift.Type.I32, 2);
      output.writeI32(this.serverId);
      output.writeFieldEnd();
    }
    if (this.characterId !== null && this.characterId !== undefined) {
      output.writeFieldBegin('characterId', Thrift.Type.I32, 3);
      output.writeI32(this.characterId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_deleteCharacter_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_deleteCharacter_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_createCharacter_args = class {
  constructor(args) {
    this.token = null;
    this.serverId = null;
    this.name = null;
    this.breedId = null;
    this.sex = null;
    this.moveOutOfIncarnam = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.serverId !== undefined && args.serverId !== null) {
        this.serverId = args.serverId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.breedId !== undefined && args.breedId !== null) {
        this.breedId = args.breedId;
      }
      if (args.sex !== undefined && args.sex !== null) {
        this.sex = args.sex;
      }
      if (args.moveOutOfIncarnam !== undefined && args.moveOutOfIncarnam !== null) {
        this.moveOutOfIncarnam = args.moveOutOfIncarnam;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.serverId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.breedId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.sex = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.moveOutOfIncarnam = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_createCharacter_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.serverId !== null && this.serverId !== undefined) {
      output.writeFieldBegin('serverId', Thrift.Type.I32, 2);
      output.writeI32(this.serverId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.breedId !== null && this.breedId !== undefined) {
      output.writeFieldBegin('breedId', Thrift.Type.I32, 4);
      output.writeI32(this.breedId);
      output.writeFieldEnd();
    }
    if (this.sex !== null && this.sex !== undefined) {
      output.writeFieldBegin('sex', Thrift.Type.BOOL, 5);
      output.writeBool(this.sex);
      output.writeFieldEnd();
    }
    if (this.moveOutOfIncarnam !== null && this.moveOutOfIncarnam !== undefined) {
      output.writeFieldBegin('moveOutOfIncarnam', Thrift.Type.BOOL, 6);
      output.writeBool(this.moveOutOfIncarnam);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_createCharacter_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Character(args.success);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Character();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_createCharacter_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getBreeds_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getBreeds_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getBreeds_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Breed]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new ttypes.Breed();
            elem38.read(input);
            this.success.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getBreeds_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter39 in this.success) {
        if (this.success.hasOwnProperty(iter39)) {
          iter39 = this.success[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getServers_args = class {
  constructor(args) {
    this.token = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getServers_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getServers_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Server]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new ttypes.Server();
            elem43.read(input);
            this.success.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getServers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter44 in this.success) {
        if (this.success.hasOwnProperty(iter44)) {
          iter44 = this.success[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchCharacterDetails_args = class {
  constructor(args) {
    this.token = null;
    this.serverId = null;
    this.characterId = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.serverId !== undefined && args.serverId !== null) {
        this.serverId = args.serverId;
      }
      if (args.characterId !== undefined && args.characterId !== null) {
        this.characterId = args.characterId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.serverId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.characterId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchCharacterDetails_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.serverId !== null && this.serverId !== undefined) {
      output.writeFieldBegin('serverId', Thrift.Type.I32, 2);
      output.writeI32(this.serverId);
      output.writeFieldEnd();
    }
    if (this.characterId !== null && this.characterId !== undefined) {
      output.writeFieldBegin('characterId', Thrift.Type.I32, 3);
      output.writeI32(this.characterId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_fetchCharacterDetails_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.CharacterDetails(args.success);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CharacterDetails();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_fetchCharacterDetails_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_addSession_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = new ttypes.Session(args.session);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.session = new ttypes.Session();
          this.session.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_addSession_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRUCT, 1);
      this.session.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_addSession_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_addSession_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_startSession_args = class {
  constructor(args) {
    this.session = null;
    if (args) {
      if (args.session !== undefined && args.session !== null) {
        this.session = new ttypes.Session(args.session);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.session = new ttypes.Session();
          this.session.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_startSession_args');
    if (this.session !== null && this.session !== undefined) {
      output.writeFieldBegin('session', Thrift.Type.STRUCT, 1);
      this.session.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_startSession_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_startSession_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_stopSession_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_stopSession_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_stopSession_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_stopSession_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getRunSummary_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getRunSummary_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getRunSummary_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.RunSummary]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp346 = input.readListBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let elem48 = null;
            elem48 = new ttypes.RunSummary();
            elem48.read(input);
            this.success.push(elem48);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getRunSummary_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter49 in this.success) {
        if (this.success.hasOwnProperty(iter49)) {
          iter49 = this.success[iter49];
          iter49.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getCharacterRunSummary_args = class {
  constructor(args) {
    this.login = null;
    if (args) {
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getCharacterRunSummary_args');
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 1);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getCharacterRunSummary_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.RunSummary(args.success);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.RunSummary();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getCharacterRunSummary_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getSessionRunSummary_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getSessionRunSummary_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botService_getSessionRunSummary_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof ttypes.DofusError) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.RunSummary]);
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp351 = input.readListBegin();
          const _size50 = _rtmp351.size || 0;
          for (let _i52 = 0; _i52 < _size50; ++_i52) {
            let elem53 = null;
            elem53 = new ttypes.RunSummary();
            elem53.read(input);
            this.success.push(elem53);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ttypes.DofusError();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pyd2botService_getSessionRunSummary_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter54 in this.success) {
        if (this.success.hasOwnProperty(iter54)) {
          iter54 = this.success[iter54];
          iter54.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pyd2botServiceClient = exports.Client = class Pyd2botServiceClient {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  ping () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_ping();
    });
  }

  send_ping () {
    const output = new this.pClass(this.output);
    const args = new Pyd2botService_ping_args();
    try {
      output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_ping (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_ping_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('ping failed: unknown result');
  }

  fetchCharacters (token) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetchCharacters(token);
    });
  }

  send_fetchCharacters (token) {
    const output = new this.pClass(this.output);
    const params = {
      token: token
    };
    const args = new Pyd2botService_fetchCharacters_args(params);
    try {
      output.writeMessageBegin('fetchCharacters', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetchCharacters (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_fetchCharacters_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetchCharacters failed: unknown result');
  }

  fetchUsedServers (token) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetchUsedServers(token);
    });
  }

  send_fetchUsedServers (token) {
    const output = new this.pClass(this.output);
    const params = {
      token: token
    };
    const args = new Pyd2botService_fetchUsedServers_args(params);
    try {
      output.writeMessageBegin('fetchUsedServers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetchUsedServers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_fetchUsedServers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetchUsedServers failed: unknown result');
  }

  runSession (token, session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_runSession(token, session);
    });
  }

  send_runSession (token, session) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      session: session
    };
    const args = new Pyd2botService_runSession_args(params);
    try {
      output.writeMessageBegin('runSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_runSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_runSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    callback(null);
  }

  fetchBreedSpells (breedId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetchBreedSpells(breedId);
    });
  }

  send_fetchBreedSpells (breedId) {
    const output = new this.pClass(this.output);
    const params = {
      breedId: breedId
    };
    const args = new Pyd2botService_fetchBreedSpells_args(params);
    try {
      output.writeMessageBegin('fetchBreedSpells', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetchBreedSpells (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_fetchBreedSpells_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetchBreedSpells failed: unknown result');
  }

  fetchJobsInfosJson () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetchJobsInfosJson();
    });
  }

  send_fetchJobsInfosJson () {
    const output = new this.pClass(this.output);
    const args = new Pyd2botService_fetchJobsInfosJson_args();
    try {
      output.writeMessageBegin('fetchJobsInfosJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetchJobsInfosJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_fetchJobsInfosJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetchJobsInfosJson failed: unknown result');
  }

  deleteCharacter (token, serverId, characterId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_deleteCharacter(token, serverId, characterId);
    });
  }

  send_deleteCharacter (token, serverId, characterId) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      serverId: serverId,
      characterId: characterId
    };
    const args = new Pyd2botService_deleteCharacter_args(params);
    try {
      output.writeMessageBegin('deleteCharacter', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_deleteCharacter (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_deleteCharacter_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('deleteCharacter failed: unknown result');
  }

  createCharacter (token, serverId, name, breedId, sex, moveOutOfIncarnam) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_createCharacter(token, serverId, name, breedId, sex, moveOutOfIncarnam);
    });
  }

  send_createCharacter (token, serverId, name, breedId, sex, moveOutOfIncarnam) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      serverId: serverId,
      name: name,
      breedId: breedId,
      sex: sex,
      moveOutOfIncarnam: moveOutOfIncarnam
    };
    const args = new Pyd2botService_createCharacter_args(params);
    try {
      output.writeMessageBegin('createCharacter', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_createCharacter (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_createCharacter_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('createCharacter failed: unknown result');
  }

  getBreeds () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBreeds();
    });
  }

  send_getBreeds () {
    const output = new this.pClass(this.output);
    const args = new Pyd2botService_getBreeds_args();
    try {
      output.writeMessageBegin('getBreeds', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBreeds (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_getBreeds_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBreeds failed: unknown result');
  }

  getServers (token) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getServers(token);
    });
  }

  send_getServers (token) {
    const output = new this.pClass(this.output);
    const params = {
      token: token
    };
    const args = new Pyd2botService_getServers_args(params);
    try {
      output.writeMessageBegin('getServers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getServers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_getServers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServers failed: unknown result');
  }

  fetchCharacterDetails (token, serverId, characterId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetchCharacterDetails(token, serverId, characterId);
    });
  }

  send_fetchCharacterDetails (token, serverId, characterId) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      serverId: serverId,
      characterId: characterId
    };
    const args = new Pyd2botService_fetchCharacterDetails_args(params);
    try {
      output.writeMessageBegin('fetchCharacterDetails', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetchCharacterDetails (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_fetchCharacterDetails_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetchCharacterDetails failed: unknown result');
  }

  addSession (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addSession(session);
    });
  }

  send_addSession (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Pyd2botService_addSession_args(params);
    try {
      output.writeMessageBegin('addSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_addSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addSession failed: unknown result');
  }

  startSession (session) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_startSession(session);
    });
  }

  send_startSession (session) {
    const output = new this.pClass(this.output);
    const params = {
      session: session
    };
    const args = new Pyd2botService_startSession_args(params);
    try {
      output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_startSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_startSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('startSession failed: unknown result');
  }

  stopSession (sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stopSession(sessionId);
    });
  }

  send_stopSession (sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId
    };
    const args = new Pyd2botService_stopSession_args(params);
    try {
      output.writeMessageBegin('stopSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stopSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_stopSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('stopSession failed: unknown result');
  }

  getRunSummary () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRunSummary();
    });
  }

  send_getRunSummary () {
    const output = new this.pClass(this.output);
    const args = new Pyd2botService_getRunSummary_args();
    try {
      output.writeMessageBegin('getRunSummary', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRunSummary (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_getRunSummary_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRunSummary failed: unknown result');
  }

  getCharacterRunSummary (login) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCharacterRunSummary(login);
    });
  }

  send_getCharacterRunSummary (login) {
    const output = new this.pClass(this.output);
    const params = {
      login: login
    };
    const args = new Pyd2botService_getCharacterRunSummary_args(params);
    try {
      output.writeMessageBegin('getCharacterRunSummary', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCharacterRunSummary (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_getCharacterRunSummary_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCharacterRunSummary failed: unknown result');
  }

  getSessionRunSummary (sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSessionRunSummary(sessionId);
    });
  }

  send_getSessionRunSummary (sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId
    };
    const args = new Pyd2botService_getSessionRunSummary_args(params);
    try {
      output.writeMessageBegin('getSessionRunSummary', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSessionRunSummary (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new Pyd2botService_getSessionRunSummary_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.error) {
      return callback(result.error);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSessionRunSummary failed: unknown result');
  }
};
const Pyd2botServiceProcessor = exports.Processor = class Pyd2botServiceProcessor {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_ping (seqid, input, output) {
    const args = new Pyd2botService_ping_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.ping.length === 0) {
      Promise.resolve(this._handler.ping.bind(this._handler)(
      )).then(result => {
        const result_obj = new Pyd2botService_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_ping_result(err);
          output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.ping((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_fetchCharacters (seqid, input, output) {
    const args = new Pyd2botService_fetchCharacters_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetchCharacters.length === 1) {
      Promise.resolve(this._handler.fetchCharacters.bind(this._handler)(
        args.token
      )).then(result => {
        const result_obj = new Pyd2botService_fetchCharacters_result({success: result});
        output.writeMessageBegin("fetchCharacters", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_fetchCharacters_result(err);
          output.writeMessageBegin("fetchCharacters", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchCharacters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetchCharacters(args.token, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_fetchCharacters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetchCharacters", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchCharacters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_fetchUsedServers (seqid, input, output) {
    const args = new Pyd2botService_fetchUsedServers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetchUsedServers.length === 1) {
      Promise.resolve(this._handler.fetchUsedServers.bind(this._handler)(
        args.token
      )).then(result => {
        const result_obj = new Pyd2botService_fetchUsedServers_result({success: result});
        output.writeMessageBegin("fetchUsedServers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_fetchUsedServers_result(err);
          output.writeMessageBegin("fetchUsedServers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchUsedServers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetchUsedServers(args.token, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_fetchUsedServers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetchUsedServers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchUsedServers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_runSession (seqid, input, output) {
    const args = new Pyd2botService_runSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.runSession.length === 2) {
      Promise.resolve(this._handler.runSession.bind(this._handler)(
        args.token,
        args.session
      )).then(result => {
        const result_obj = new Pyd2botService_runSession_result({success: result});
        output.writeMessageBegin("runSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_runSession_result(err);
          output.writeMessageBegin("runSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.runSession(args.token, args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_runSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("runSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_fetchBreedSpells (seqid, input, output) {
    const args = new Pyd2botService_fetchBreedSpells_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetchBreedSpells.length === 1) {
      Promise.resolve(this._handler.fetchBreedSpells.bind(this._handler)(
        args.breedId
      )).then(result => {
        const result_obj = new Pyd2botService_fetchBreedSpells_result({success: result});
        output.writeMessageBegin("fetchBreedSpells", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_fetchBreedSpells_result(err);
          output.writeMessageBegin("fetchBreedSpells", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchBreedSpells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetchBreedSpells(args.breedId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_fetchBreedSpells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetchBreedSpells", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchBreedSpells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_fetchJobsInfosJson (seqid, input, output) {
    const args = new Pyd2botService_fetchJobsInfosJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetchJobsInfosJson.length === 0) {
      Promise.resolve(this._handler.fetchJobsInfosJson.bind(this._handler)(
      )).then(result => {
        const result_obj = new Pyd2botService_fetchJobsInfosJson_result({success: result});
        output.writeMessageBegin("fetchJobsInfosJson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_fetchJobsInfosJson_result(err);
          output.writeMessageBegin("fetchJobsInfosJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchJobsInfosJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetchJobsInfosJson((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_fetchJobsInfosJson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetchJobsInfosJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchJobsInfosJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_deleteCharacter (seqid, input, output) {
    const args = new Pyd2botService_deleteCharacter_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.deleteCharacter.length === 3) {
      Promise.resolve(this._handler.deleteCharacter.bind(this._handler)(
        args.token,
        args.serverId,
        args.characterId
      )).then(result => {
        const result_obj = new Pyd2botService_deleteCharacter_result({success: result});
        output.writeMessageBegin("deleteCharacter", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_deleteCharacter_result(err);
          output.writeMessageBegin("deleteCharacter", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteCharacter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.deleteCharacter(args.token, args.serverId, args.characterId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_deleteCharacter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("deleteCharacter", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteCharacter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_createCharacter (seqid, input, output) {
    const args = new Pyd2botService_createCharacter_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.createCharacter.length === 6) {
      Promise.resolve(this._handler.createCharacter.bind(this._handler)(
        args.token,
        args.serverId,
        args.name,
        args.breedId,
        args.sex,
        args.moveOutOfIncarnam
      )).then(result => {
        const result_obj = new Pyd2botService_createCharacter_result({success: result});
        output.writeMessageBegin("createCharacter", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_createCharacter_result(err);
          output.writeMessageBegin("createCharacter", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createCharacter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.createCharacter(args.token, args.serverId, args.name, args.breedId, args.sex, args.moveOutOfIncarnam, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_createCharacter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("createCharacter", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createCharacter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBreeds (seqid, input, output) {
    const args = new Pyd2botService_getBreeds_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBreeds.length === 0) {
      Promise.resolve(this._handler.getBreeds.bind(this._handler)(
      )).then(result => {
        const result_obj = new Pyd2botService_getBreeds_result({success: result});
        output.writeMessageBegin("getBreeds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_getBreeds_result(err);
          output.writeMessageBegin("getBreeds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBreeds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBreeds((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_getBreeds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBreeds", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBreeds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getServers (seqid, input, output) {
    const args = new Pyd2botService_getServers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getServers.length === 1) {
      Promise.resolve(this._handler.getServers.bind(this._handler)(
        args.token
      )).then(result => {
        const result_obj = new Pyd2botService_getServers_result({success: result});
        output.writeMessageBegin("getServers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_getServers_result(err);
          output.writeMessageBegin("getServers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getServers(args.token, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_getServers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getServers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_fetchCharacterDetails (seqid, input, output) {
    const args = new Pyd2botService_fetchCharacterDetails_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetchCharacterDetails.length === 3) {
      Promise.resolve(this._handler.fetchCharacterDetails.bind(this._handler)(
        args.token,
        args.serverId,
        args.characterId
      )).then(result => {
        const result_obj = new Pyd2botService_fetchCharacterDetails_result({success: result});
        output.writeMessageBegin("fetchCharacterDetails", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_fetchCharacterDetails_result(err);
          output.writeMessageBegin("fetchCharacterDetails", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchCharacterDetails", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetchCharacterDetails(args.token, args.serverId, args.characterId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_fetchCharacterDetails_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetchCharacterDetails", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchCharacterDetails", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addSession (seqid, input, output) {
    const args = new Pyd2botService_addSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addSession.length === 1) {
      Promise.resolve(this._handler.addSession.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Pyd2botService_addSession_result({success: result});
        output.writeMessageBegin("addSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_addSession_result(err);
          output.writeMessageBegin("addSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addSession(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_addSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_startSession (seqid, input, output) {
    const args = new Pyd2botService_startSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.startSession.length === 1) {
      Promise.resolve(this._handler.startSession.bind(this._handler)(
        args.session
      )).then(result => {
        const result_obj = new Pyd2botService_startSession_result({success: result});
        output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_startSession_result(err);
          output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.startSession(args.session, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_startSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_stopSession (seqid, input, output) {
    const args = new Pyd2botService_stopSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stopSession.length === 1) {
      Promise.resolve(this._handler.stopSession.bind(this._handler)(
        args.sessionId
      )).then(result => {
        const result_obj = new Pyd2botService_stopSession_result({success: result});
        output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_stopSession_result(err);
          output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.stopSession(args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_stopSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRunSummary (seqid, input, output) {
    const args = new Pyd2botService_getRunSummary_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRunSummary.length === 0) {
      Promise.resolve(this._handler.getRunSummary.bind(this._handler)(
      )).then(result => {
        const result_obj = new Pyd2botService_getRunSummary_result({success: result});
        output.writeMessageBegin("getRunSummary", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_getRunSummary_result(err);
          output.writeMessageBegin("getRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRunSummary((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_getRunSummary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCharacterRunSummary (seqid, input, output) {
    const args = new Pyd2botService_getCharacterRunSummary_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCharacterRunSummary.length === 1) {
      Promise.resolve(this._handler.getCharacterRunSummary.bind(this._handler)(
        args.login
      )).then(result => {
        const result_obj = new Pyd2botService_getCharacterRunSummary_result({success: result});
        output.writeMessageBegin("getCharacterRunSummary", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_getCharacterRunSummary_result(err);
          output.writeMessageBegin("getCharacterRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCharacterRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCharacterRunSummary(args.login, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_getCharacterRunSummary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCharacterRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCharacterRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSessionRunSummary (seqid, input, output) {
    const args = new Pyd2botService_getSessionRunSummary_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSessionRunSummary.length === 1) {
      Promise.resolve(this._handler.getSessionRunSummary.bind(this._handler)(
        args.sessionId
      )).then(result => {
        const result_obj = new Pyd2botService_getSessionRunSummary_result({success: result});
        output.writeMessageBegin("getSessionRunSummary", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.DofusError) {
          result = new Pyd2botService_getSessionRunSummary_result(err);
          output.writeMessageBegin("getSessionRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSessionRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSessionRunSummary(args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DofusError) {
          result_obj = new Pyd2botService_getSessionRunSummary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSessionRunSummary", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSessionRunSummary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
