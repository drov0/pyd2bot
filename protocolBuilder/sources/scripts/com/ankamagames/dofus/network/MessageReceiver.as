package com.ankamagames.dofus.network
{
    import com.ankamagames.dofus.network.messages.authorized.ConsoleCommandsListMessage;
    import com.ankamagames.dofus.network.messages.authorized.ConsoleMessage;
    import com.ankamagames.dofus.network.messages.common.NetworkDataContainerMessage;
    import com.ankamagames.dofus.network.messages.common.basic.BasicPongMessage;
    import com.ankamagames.dofus.network.messages.connection.CredentialsAcknowledgementMessage;
    import com.ankamagames.dofus.network.messages.connection.HelloConnectMessage;
    import com.ankamagames.dofus.network.messages.connection.IdentificationFailedBannedMessage;
    import com.ankamagames.dofus.network.messages.connection.IdentificationFailedForBadVersionMessage;
    import com.ankamagames.dofus.network.messages.connection.IdentificationFailedMessage;
    import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessMessage;
    import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessWithLoginTokenMessage;
    import com.ankamagames.dofus.network.messages.connection.MigratedServerListMessage;
    import com.ankamagames.dofus.network.messages.connection.SelectedServerDataExtendedMessage;
    import com.ankamagames.dofus.network.messages.connection.SelectedServerDataMessage;
    import com.ankamagames.dofus.network.messages.connection.SelectedServerRefusedMessage;
    import com.ankamagames.dofus.network.messages.connection.ServerStatusUpdateMessage;
    import com.ankamagames.dofus.network.messages.connection.ServersListMessage;
    import com.ankamagames.dofus.network.messages.connection.register.AccountLinkRequiredMessage;
    import com.ankamagames.dofus.network.messages.connection.register.NicknameAcceptedMessage;
    import com.ankamagames.dofus.network.messages.connection.register.NicknameRefusedMessage;
    import com.ankamagames.dofus.network.messages.connection.register.NicknameRegistrationMessage;
    import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceSearchErrorMessage;
    import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceServerListMessage;
    import com.ankamagames.dofus.network.messages.debug.DebugClearHighlightCellsMessage;
    import com.ankamagames.dofus.network.messages.debug.DebugHighlightCellsMessage;
    import com.ankamagames.dofus.network.messages.debug.DebugInClientMessage;
    import com.ankamagames.dofus.network.messages.debug.DumpedEntityStatsMessage;
    import com.ankamagames.dofus.network.messages.game.PaginationAnswerAbstractMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementAlmostFinishedDetailedListMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailedListMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailsMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedInformationMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementListMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardErrorMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardSuccessMessage;
    import com.ankamagames.dofus.network.messages.game.achievement.FriendGuildWarnOnAchievementCompleteStateMessage;
    import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionMessage;
    import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionWithAckMessage;
    import com.ankamagames.dofus.network.messages.game.actions.GameActionNoopMessage;
    import com.ankamagames.dofus.network.messages.game.actions.GameActionSpamMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.AbstractGameActionFightTargetedAbilityMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightActivateGlyphTrapMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCarryCharacterMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightChangeLookMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCloseCombatMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDeathMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellEffectMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellSpellMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellableEffectMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDodgePointLossMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDropCharacterMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightExchangePositionsMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibilityMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibleDetectedMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightKillMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifeAndShieldPointsLostMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsGainMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsLostMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightMarkCellsMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightModifyEffectsDurationMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightMultipleSummonMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightNoSpellCastMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightPointsVariationMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReduceDamagesMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectDamagesMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectSpellMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSlideMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCastMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCooldownVariationMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellImmunityMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightStealKamaMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSummonMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTackledMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTeleportOnSameMapMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightThrowCharacterMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerEffectMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerGlyphTrapMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightUnmarkCellsMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightVanishMessage;
    import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionUpdateEffectTriggerCountMessage;
    import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceEndMessage;
    import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceStartMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationResultMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationStartedMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsErrorMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceGuildLeavingMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceInsiderInfoMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecrutedMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecruterMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitedMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceJoinedMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceLeftMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceListMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceMembershipMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceModificationStartedMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.AlliancePartialListMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.KohUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.alliance.summary.AllianceSummaryMessage;
    import com.ankamagames.dofus.network.messages.game.almanach.AlmanachCalendarDateMessage;
    import com.ankamagames.dofus.network.messages.game.approach.AccountCapabilitiesMessage;
    import com.ankamagames.dofus.network.messages.game.approach.AccountLoggingKickedMessage;
    import com.ankamagames.dofus.network.messages.game.approach.AlreadyConnectedMessage;
    import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketAcceptedMessage;
    import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketRefusedMessage;
    import com.ankamagames.dofus.network.messages.game.approach.HelloGameMessage;
    import com.ankamagames.dofus.network.messages.game.approach.ReloginTokenStatusMessage;
    import com.ankamagames.dofus.network.messages.game.approach.ServerOptionalFeaturesMessage;
    import com.ankamagames.dofus.network.messages.game.approach.ServerSessionConstantsMessage;
    import com.ankamagames.dofus.network.messages.game.approach.ServerSettingsMessage;
    import com.ankamagames.dofus.network.messages.game.atlas.AtlasPointInformationsMessage;
    import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassResetMessage;
    import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePartyMemberMessage;
    import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePvpSeekMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicAckMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicDateMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicLatencyStatsRequestMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicNoOperationMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicTimeMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsMessage;
    import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsNoMatchMessage;
    import com.ankamagames.dofus.network.messages.game.basic.CurrentServerStatusUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.basic.NumericWhoIsMessage;
    import com.ankamagames.dofus.network.messages.game.basic.SequenceNumberRequestMessage;
    import com.ankamagames.dofus.network.messages.game.basic.TextInformationMessage;
    import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.AlignmentWarEffortDonatePreviewMessage;
    import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.AlignmentWarEffortDonationResultMessage;
    import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.CharacterAlignmentWarEffortProgressionMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.BasicCharactersListMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedErrorMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedForceMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedSuccessMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListErrorMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListMessage;
    import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListWithRemodelingMessage;
    import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCanBeCreatedResultMessage;
    import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCreationResultMessage;
    import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionFailureMessage;
    import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionSuccessMessage;
    import com.ankamagames.dofus.network.messages.game.character.debt.DebtsDeleteMessage;
    import com.ankamagames.dofus.network.messages.game.character.debt.DebtsUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.character.deletion.CharacterDeletionErrorMessage;
    import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellDeleteMessage;
    import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellEquipmentSlotsMessage;
    import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellListUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.CharacterExperienceGainMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpInformationMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.CharacterStatsListMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.FighterStatsListMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenBeginMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenEndMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.UpdateLifePointsMessage;
    import com.ankamagames.dofus.network.messages.game.character.stats.UpdateSpellModifierMessage;
    import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateErrorMessage;
    import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatAbstractServerMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatAdminServerMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatErrorMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatKolizeumServerMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyWithObjectMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatServerMessage;
    import com.ankamagames.dofus.network.messages.game.chat.ChatServerWithObjectMessage;
    import com.ankamagames.dofus.network.messages.game.chat.channel.ChannelEnablingChangeMessage;
    import com.ankamagames.dofus.network.messages.game.chat.channel.EnabledChannelsMessage;
    import com.ankamagames.dofus.network.messages.game.chat.community.ChatCommunityChannelCommunityMessage;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyExtraPackListMessage;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyMessage;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.LocalizedChatSmileyMessage;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyResultMessage;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameCautiousMapMovementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextCreateErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextCreateMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextDestroyMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextMoveElementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextMoveMultipleElementsMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextRefreshEntityLookMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementWithEventMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsWithEventsMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameEntitiesDispositionMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationsMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameMapMovementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameMapNoMovementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameMapSpeedMovementMessage;
    import com.ankamagames.dofus.network.messages.game.context.GameRefreshMonsterBoostsMessage;
    import com.ankamagames.dofus.network.messages.game.context.ShowCellMessage;
    import com.ankamagames.dofus.network.messages.game.context.ShowCellSpectatorMessage;
    import com.ankamagames.dofus.network.messages.game.context.display.DisplayNumericalValuePaddockMessage;
    import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingMessage;
    import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightEndMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightHumanReadyStateMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightJoinMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewRoundMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewWaveMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightOptionStateUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPauseMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementPossiblePositionsMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsCancelledMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsOfferMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightRemoveTeamMemberMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeWithSlavesMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectateMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectatorJoinMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartingMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSynchronizeMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnEndMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnListMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnReadyRequestMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnResumeMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartPlayingMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.GameFightUpdateTeamMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.RefreshCharacterStatsMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.SlaveNoLongerControledMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.SlaveSwitchContextMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.arena.ArenaFighterIdleMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.arena.ArenaFighterLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.breach.BreachGameFightEndMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeInfoMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeTargetUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeTargetsListMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightRefreshFighterMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterMessage;
    import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterRandomStaticPoseMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectAddMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectListAddMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountDataErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountDataMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountEmoteIconUsedOkMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountEquipedErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountReleasedMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountRenamedMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountRidingMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountSetMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountSterilizedMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountUnSetMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.MountXpRatioMessage;
    import com.ankamagames.dofus.network.messages.game.context.mount.PaddockBuyResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.notification.NotificationByServerMessage;
    import com.ankamagames.dofus.network.messages.game.context.notification.NotificationListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.AnomalySubareaInformationResponseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapInstanceMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorWithEventMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowMultipleActorsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHavenBagMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHouseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsWithCoordsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightCountMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightStartPositionsUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapObstacleUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRewardRateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsExtendedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.TeleportOnSameMapMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.alignment.war.effort.AlignmentWarEffortProgressionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.AnomalyStateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.MapComplementaryInformationsAnomalyMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBonusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBudgetMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachCharactersMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachEnterMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachExitResponseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachRoomLockedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachRoomUnlockResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachSavedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachStateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachTeleportResponseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.MapComplementaryInformationsBreachMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.branch.BreachBranchesMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationCloseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationOfferMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationResponseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachKickResponseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardBoughtMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayGameOverMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayPlayerLifeStatusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionFinishedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedObjectUseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.document.DocumentReadingBeginMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteAddMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayAbstractMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMassiveMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayAggressionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayFightRequestCanceledMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterAngryAtPlayerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterNotAngryAtPlayerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyAnsweredMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyRequestedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayRemoveChallengeMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayShowChallengeMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFightPropositionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFighterStatusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaInvitationCandidatesAnswerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaLeagueRewardsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaPlayerBehavioursMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaRegistrationStatusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaRegistrationWarningMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToFightServerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToGameServerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagFinishedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagStartMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagDailyLoteryMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagFurnituresMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagPackListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagRoomUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.HavenBagPermissionsUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagClosedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagOfferMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.AccountHouseMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseBuyResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HousePropertiesMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseSellingUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseToSellListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildNoneMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildRightsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobAllowMultiCraftRequestMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobBookSubscriptionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryAddMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryEntryMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectorySettingsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobDescriptionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceMultiUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceOtherPlayerUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobLevelUpMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobMultiCraftAvailableSkillsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableCodeResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableShowCodeDialogMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateAbstractMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateHouseDoorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateStorageMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.AlliancePrismDialogQuestionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.AllianceTaxCollectorDialogQuestionExtendedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.EntityTalkMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.ListMapNpcsQuestStatusUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogCreationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogQuestionMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcGenericActionFailureMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.PortalDialogCreationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionBasicMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionExtendedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundAddedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundListAddedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMultipleMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.GameDataPlayFarmObjectAnimationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockPropertiesMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockSellBuyDialogMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockToSellListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyEventMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMemberInFightMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderAvailableDungeonsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderListenErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterSuccessMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCancelInvitationNotificationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCannotJoinErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyDeletedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyFollowStatusUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationCancelledForGuestMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDetailsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonDetailsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyJoinMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyKickedByMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaderUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLocateMembersMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLoyaltyStatusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberEjectedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberInStandardFightMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyModifiableStatusMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewGuestMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewMemberMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRefuseInvitationNotificationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRestrictedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateLightMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.breach.PartyMemberInBreachFightMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.entity.PartyEntityUpdateLightMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.purchasable.PurchasableDialogMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.FollowedQuestsMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestObjectiveValidatedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStartedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepInfoMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepStartedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepValidatedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestValidatedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.WatchQuestListMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.WatchQuestStepInfoMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.spell.SpellVariantActivationMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.stats.StatsUpgradeResultMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntAvailableRetryCountUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerFailedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFinishedMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFlagRequestAnswerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntRequestAnswerMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntShowLegendaryUIMessage;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.visual.GameRolePlaySpellAnimMessage;
    import com.ankamagames.dofus.network.messages.game.dialog.LeaveDialogMessage;
    import com.ankamagames.dofus.network.messages.game.dialog.PauseDialogMessage;
    import com.ankamagames.dofus.network.messages.game.entity.EntitiesInformationMessage;
    import com.ankamagames.dofus.network.messages.game.entity.EntityInformationMessage;
    import com.ankamagames.dofus.network.messages.game.finishmoves.FinishMoveListMessage;
    import com.ankamagames.dofus.network.messages.game.friend.AcquaintanceAddedMessage;
    import com.ankamagames.dofus.network.messages.game.friend.AcquaintancesListMessage;
    import com.ankamagames.dofus.network.messages.game.friend.ContactAddFailureMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendAddFailureMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendAddedMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendDeleteResultMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendStatusShareStateMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnConnectionStateMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnLevelGainStateMessage;
    import com.ankamagames.dofus.network.messages.game.friend.FriendsListMessage;
    import com.ankamagames.dofus.network.messages.game.friend.GuildMemberWarnOnConnectionStateMessage;
    import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddFailureMessage;
    import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddedMessage;
    import com.ankamagames.dofus.network.messages.game.friend.IgnoredDeleteResultMessage;
    import com.ankamagames.dofus.network.messages.game.friend.IgnoredListMessage;
    import com.ankamagames.dofus.network.messages.game.friend.SpouseInformationsMessage;
    import com.ankamagames.dofus.network.messages.game.friend.SpouseStatusMessage;
    import com.ankamagames.dofus.network.messages.game.friend.WarnOnPermaDeathStateMessage;
    import com.ankamagames.dofus.network.messages.game.guest.GuestLimitationMessage;
    import com.ankamagames.dofus.network.messages.game.guest.GuestModeMessage;
    import com.ankamagames.dofus.network.messages.game.guild.ChallengeFightJoinRefusedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildCreationResultMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildCreationStartedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildFactsErrorMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildFactsMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildHouseRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildHouseUpdateInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildHousesInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInAllianceFactsMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsGeneralMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMemberUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMembersMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsPaddocksMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInfosUpgradeMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecrutedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecruterMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildInvitedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildJoinedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildLeftMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildLevelUpMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildListMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildMemberLeavingMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildMemberOnlineStatusMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildMembershipMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildModificationStartedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildMotdMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildMotdSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockBoughtMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildRanksMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildSummaryMessage;
    import com.ankamagames.dofus.network.messages.game.guild.GuildVersatileInfoListMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationDeletedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationIsAnsweredMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationReceivedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildListApplicationAnswerMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildListApplicationModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerApplicationAbstractMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerApplicationInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerNoApplicationInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.chest.AddListenerOnSynchronizedStorageMessage;
    import com.ankamagames.dofus.network.messages.game.guild.chest.ListenersOfSynchronizedStorageMessage;
    import com.ankamagames.dofus.network.messages.game.guild.chest.RemoveListenerOnSynchronizedStorageMessage;
    import com.ankamagames.dofus.network.messages.game.guild.logbook.GuildLogbookInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.recruitment.GuildRecruitmentInvalidateMessage;
    import com.ankamagames.dofus.network.messages.game.guild.recruitment.RecruitmentInformationMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.AbstractTaxCollectorListMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersEnemiesListMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersEnemyRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersHelpersJoinMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersHelpersLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorAttackedMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorAttackedResultMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorErrorMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorListMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementAddMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementsOfflineMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorStateUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.guild.tax.TopTaxCollectorListMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolFightPreparationUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolListMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolPartyLostMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolPartyRefreshMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolSelectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.idol.IdolSelectedMessage;
    import com.ankamagames.dofus.network.messages.game.initialization.CharacterCapabilitiesMessage;
    import com.ankamagames.dofus.network.messages.game.initialization.CharacterLoadingCompleteMessage;
    import com.ankamagames.dofus.network.messages.game.initialization.OnConnectionEventMessage;
    import com.ankamagames.dofus.network.messages.game.initialization.ServerExperienceModificatorMessage;
    import com.ankamagames.dofus.network.messages.game.initialization.SetCharacterRestrictionsMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.InteractiveElementUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.InteractiveMapUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseEndedMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseErrorMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUsedMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.StatedElementUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.StatedMapUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesRequestedMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyCloseMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyOfferMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.zaap.KnownZaapListMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.zaap.TeleportDestinationsMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapDestinationsMessage;
    import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapRespawnUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.KamasUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.DecraftResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.EvolutiveObjectRecycleResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseBuyResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemAddOkMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemRemoveOkMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseUnsoldItemsMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceForSellerMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidSearchOkMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBuyOkMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftCountModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftPaymentModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMagicWithObjectDescMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectDescMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectIdMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCrafterJobLevelupMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeGuildTaxCollectorGetMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeIsReadyMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeItemAutoCraftStopedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMoneyMovementInformationMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountFreeFromPaddockMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountStableErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountSterilizeFromPaddockMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockAddMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableAddMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableBornAddMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsTakenFromPaddockMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectsAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOfflineSoldItemsMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOkMultiCraftMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeReplyTaxVendorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedTradeMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeSellOkMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMovementRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMovementUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMultiMovementRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMultiMovementUpdatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockStartedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftWithInformationMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkHumanVendorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkJobIndexMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountWithOutPaddockMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCrafterMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCustomerMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcShopMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcTradeMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRecycleTradeMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRunesTradeMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidBuyerMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidSellerMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMountStockMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedTaxCollectorShopMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithPodsMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithStorageMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStoppedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesExchangerDescriptionForUserMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesItemsExchangerDescriptionForUserMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWaitingResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWeightMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ItemNoMoreAvailableMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.RecycleResultMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.UpdateMountCharacteristicsMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeKamaModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedInBagMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectPutInBagMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedFromBagMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangePodsModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.GoldAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryContentMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryWeightMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.LivingObjectMessageMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectAssociatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectPreviewMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectDeletedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectJobAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectModifiedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectMovementMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectQuantityMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsAddedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsDeletedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsQuantityMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemWithBonusMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.SetUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectAssociatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.WatchInventoryContentMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectAssociatedMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.spells.SpellListMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageInventoryContentMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageKamasUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewErrorMessage;
    import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewMessage;
    import com.ankamagames.dofus.network.messages.game.moderation.PopupWarningClosedMessage;
    import com.ankamagames.dofus.network.messages.game.moderation.PopupWarningMessage;
    import com.ankamagames.dofus.network.messages.game.modificator.AreaFightModificatorUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.presets.InvalidPresetsMessage;
    import com.ankamagames.dofus.network.messages.game.presets.ItemForPresetUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetDeleteResultMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetSaveErrorMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetSavedMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultWithMissingIdsMessage;
    import com.ankamagames.dofus.network.messages.game.presets.PresetsMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightAddedMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightAttackerAddMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightAttackerRemoveMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightDefenderAddMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightDefenderLeaveMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismFightStateUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismInfoCloseMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismInfoInValidMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismSetSabotagedRefusedMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismSettingsErrorMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismsInfoValidMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismsListMessage;
    import com.ankamagames.dofus.network.messages.game.prism.PrismsListUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.progression.suggestion.ActivitySuggestionsMessage;
    import com.ankamagames.dofus.network.messages.game.pvp.AlignmentRankUpdateMessage;
    import com.ankamagames.dofus.network.messages.game.pvp.UpdateMapPlayersAgressableStatusMessage;
    import com.ankamagames.dofus.network.messages.game.pvp.UpdateSelfAgressableStatusMessage;
    import com.ankamagames.dofus.network.messages.game.script.CinematicMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarAddErrorMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarContentMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRefreshMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemoveErrorMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemovedMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarReplacedMessage;
    import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarSwapErrorMessage;
    import com.ankamagames.dofus.network.messages.game.social.BulletinMessage;
    import com.ankamagames.dofus.network.messages.game.social.ContactLookErrorMessage;
    import com.ankamagames.dofus.network.messages.game.social.ContactLookMessage;
    import com.ankamagames.dofus.network.messages.game.social.SocialNoticeMessage;
    import com.ankamagames.dofus.network.messages.game.social.SocialNoticeSetErrorMessage;
    import com.ankamagames.dofus.network.messages.game.startup.StartupActionAddMessage;
    import com.ankamagames.dofus.network.messages.game.startup.StartupActionFinishedMessage;
    import com.ankamagames.dofus.network.messages.game.startup.StartupActionsListMessage;
    import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionLimitationMessage;
    import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionZoneMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentGainedMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentLostMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectedMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.TitleGainedMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.TitleLostMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectErrorMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectedMessage;
    import com.ankamagames.dofus.network.messages.game.tinsel.TitlesAndOrnamentsListMessage;
    import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedByObjectMessage;
    import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedMessage;
    import com.ankamagames.dofus.network.messages.handshake.ProtocolRequired;
    import com.ankamagames.dofus.network.messages.queues.LoginQueueStatusMessage;
    import com.ankamagames.dofus.network.messages.queues.QueueStatusMessage;
    import com.ankamagames.dofus.network.messages.secure.TrustStatusMessage;
    import com.ankamagames.dofus.network.messages.security.CheckFileRequestMessage;
    import com.ankamagames.dofus.network.messages.security.RawDataMessage;
    import com.ankamagames.dofus.network.messages.server.basic.SystemMessageDisplayMessage;
    import com.ankamagames.dofus.network.messages.subscription.AccountInformationsUpdateMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiApiKeyMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiAuthErrorMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiBufferListMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiBuyValidationMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiConfirmationMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiSessionMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiShopApiKeyMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiTokenMessage;
    import com.ankamagames.dofus.network.messages.web.haapi.HaapiValidationMessage;
    import com.ankamagames.dofus.network.messages.wtf.ClientYouAreDrunkMessage;
    import com.ankamagames.jerakine.logger.Log;
    import com.ankamagames.jerakine.logger.Logger;
    import com.ankamagames.jerakine.managers.StoreDataManager;
    import com.ankamagames.jerakine.network.ICustomDataInput;
    import com.ankamagames.jerakine.network.INetworkMessage;
    import com.ankamagames.jerakine.network.RawDataParser;
    import com.ankamagames.jerakine.network.UnpackMode;
    import flash.utils.Dictionary;
    import flash.utils.getQualifiedClassName;
    
    public class MessageReceiver implements RawDataParser
    {
        
        private static const _log:Logger = Log.getLogger(getQualifiedClassName(MessageReceiver));
        
        private static const _messagesTypes:Dictionary = new Dictionary();
        
        private static const _unpackModes:Dictionary = new Dictionary();
        
        {
            _messagesTypes[8136] = PaginationAnswerAbstractMessage;
            _messagesTypes[1791] = NetworkDataContainerMessage;
            _messagesTypes[2128] = ProtocolRequired;
            _messagesTypes[8638] = LoginQueueStatusMessage;
            _messagesTypes[2764] = QueueStatusMessage;
            _messagesTypes[3859] = ConsoleMessage;
            _messagesTypes[8595] = ConsoleCommandsListMessage;
            _messagesTypes[6679] = HelloConnectMessage;
            _messagesTypes[6739] = CredentialsAcknowledgementMessage;
            _messagesTypes[883] = NicknameRegistrationMessage;
            _messagesTypes[5541] = AccountLinkRequiredMessage;
            _messagesTypes[7807] = NicknameRefusedMessage;
            _messagesTypes[5458] = NicknameAcceptedMessage;
            _messagesTypes[8486] = IdentificationSuccessMessage;
            _messagesTypes[8598] = IdentificationSuccessWithLoginTokenMessage;
            _messagesTypes[9624] = IdentificationFailedMessage;
            _messagesTypes[9804] = IdentificationFailedBannedMessage;
            _messagesTypes[5231] = IdentificationFailedForBadVersionMessage;
            _messagesTypes[287] = ServersListMessage;
            _messagesTypes[456] = ServerStatusUpdateMessage;
            _messagesTypes[5726] = SelectedServerDataMessage;
            _messagesTypes[5137] = SelectedServerDataExtendedMessage;
            _messagesTypes[1249] = SelectedServerRefusedMessage;
            _messagesTypes[1049] = AcquaintanceSearchErrorMessage;
            _messagesTypes[5764] = AcquaintanceServerListMessage;
            _messagesTypes[8862] = MigratedServerListMessage;
            _messagesTypes[1625] = HelloGameMessage;
            _messagesTypes[4499] = AuthenticationTicketAcceptedMessage;
            _messagesTypes[5227] = AuthenticationTicketRefusedMessage;
            _messagesTypes[4225] = AlreadyConnectedMessage;
            _messagesTypes[5866] = AccountLoggingKickedMessage;
            _messagesTypes[3312] = ReloginTokenStatusMessage;
            _messagesTypes[8996] = ServerSettingsMessage;
            _messagesTypes[8843] = ServerSessionConstantsMessage;
            _messagesTypes[1661] = ServerOptionalFeaturesMessage;
            _messagesTypes[284] = AccountCapabilitiesMessage;
            _messagesTypes[5] = TrustStatusMessage;
            _messagesTypes[9246] = AccountInformationsUpdateMessage;
            _messagesTypes[5059] = CheckFileRequestMessage;
            _messagesTypes[8055] = RawDataMessage;
            _messagesTypes[9378] = StartupActionsListMessage;
            _messagesTypes[3818] = StartupActionAddMessage;
            _messagesTypes[4935] = StartupActionFinishedMessage;
            _messagesTypes[7424] = CharacterCanBeCreatedResultMessage;
            _messagesTypes[5947] = CharacterCreationResultMessage;
            _messagesTypes[8485] = CharacterDeletionErrorMessage;
            _messagesTypes[4264] = CharacterNameSuggestionSuccessMessage;
            _messagesTypes[2405] = CharacterNameSuggestionFailureMessage;
            _messagesTypes[4726] = BasicCharactersListMessage;
            _messagesTypes[821] = CharactersListMessage;
            _messagesTypes[8957] = CharactersListWithRemodelingMessage;
            _messagesTypes[1043] = CharactersListErrorMessage;
            _messagesTypes[5412] = CharacterSelectedSuccessMessage;
            _messagesTypes[4969] = CharacterSelectedForceMessage;
            _messagesTypes[8104] = CharacterSelectedErrorMessage;
            _messagesTypes[3067] = PopupWarningMessage;
            _messagesTypes[1786] = PopupWarningClosedMessage;
            _messagesTypes[8709] = BasicDateMessage;
            _messagesTypes[6995] = BasicTimeMessage;
            _messagesTypes[2286] = AlmanachCalendarDateMessage;
            _messagesTypes[6380] = BasicNoOperationMessage;
            _messagesTypes[4137] = BasicAckMessage;
            _messagesTypes[4896] = SystemMessageDisplayMessage;
            _messagesTypes[2962] = TextInformationMessage;
            _messagesTypes[9613] = OnConnectionEventMessage;
            _messagesTypes[3701] = SetCharacterRestrictionsMessage;
            _messagesTypes[2489] = ServerExperienceModificatorMessage;
            _messagesTypes[7542] = CharacterCapabilitiesMessage;
            _messagesTypes[1599] = CharacterLoadingCompleteMessage;
            _messagesTypes[207] = GameContextCreateMessage;
            _messagesTypes[9524] = GameContextCreateErrorMessage;
            _messagesTypes[2482] = GameContextDestroyMessage;
            _messagesTypes[3938] = GameContextRemoveElementMessage;
            _messagesTypes[8330] = GameContextRemoveMultipleElementsMessage;
            _messagesTypes[8406] = GameContextRemoveElementWithEventMessage;
            _messagesTypes[8309] = GameContextRemoveMultipleElementsWithEventsMessage;
            _messagesTypes[1619] = GameContextMoveElementMessage;
            _messagesTypes[7663] = GameContextMoveMultipleElementsMessage;
            _messagesTypes[5027] = GameContextRefreshEntityLookMessage;
            _messagesTypes[1602] = GameMapSpeedMovementMessage;
            _messagesTypes[4942] = GameMapNoMovementMessage;
            _messagesTypes[9141] = GameMapMovementMessage;
            _messagesTypes[8806] = GameCautiousMapMovementMessage;
            _messagesTypes[3918] = GameMapChangeOrientationMessage;
            _messagesTypes[1847] = GameMapChangeOrientationsMessage;
            _messagesTypes[942] = GameEntityDispositionMessage;
            _messagesTypes[4015] = GameEntitiesDispositionMessage;
            _messagesTypes[4700] = GameEntityDispositionErrorMessage;
            _messagesTypes[9734] = GameRefreshMonsterBoostsMessage;
            _messagesTypes[7874] = PlayerStatusUpdateErrorMessage;
            _messagesTypes[3388] = PlayerStatusUpdateMessage;
            _messagesTypes[531] = BasicWhoIsMessage;
            _messagesTypes[7837] = BasicWhoIsNoMatchMessage;
            _messagesTypes[9665] = NumericWhoIsMessage;
            _messagesTypes[3778] = BasicPongMessage;
            _messagesTypes[2984] = BasicLatencyStatsRequestMessage;
            _messagesTypes[1515] = SequenceNumberRequestMessage;
            _messagesTypes[8811] = CurrentServerStatusUpdateMessage;
            _messagesTypes[2130] = CinematicMessage;
            _messagesTypes[5720] = DumpedEntityStatsMessage;
            _messagesTypes[6028] = DebugHighlightCellsMessage;
            _messagesTypes[9968] = DebugClearHighlightCellsMessage;
            _messagesTypes[5609] = DebugInClientMessage;
            _messagesTypes[419] = ClientYouAreDrunkMessage;
            _messagesTypes[5143] = DisplayNumericalValuePaddockMessage;
            _messagesTypes[8953] = CurrentMapMessage;
            _messagesTypes[1087] = CurrentMapInstanceMessage;
            _messagesTypes[4563] = TeleportOnSameMapMessage;
            _messagesTypes[3720] = MapFightCountMessage;
            _messagesTypes[2180] = MapRunningFightListMessage;
            _messagesTypes[6309] = MapRunningFightDetailsMessage;
            _messagesTypes[8819] = MapRunningFightDetailsExtendedMessage;
            _messagesTypes[2276] = MapObstacleUpdateMessage;
            _messagesTypes[7208] = MapComplementaryInformationsDataMessage;
            _messagesTypes[9074] = MapComplementaryInformationsDataInHouseMessage;
            _messagesTypes[9456] = MapComplementaryInformationsWithCoordsMessage;
            _messagesTypes[3091] = MapRewardRateMessage;
            _messagesTypes[8364] = BreachEnterMessage;
            _messagesTypes[9165] = BreachTeleportResponseMessage;
            _messagesTypes[2170] = BreachRoomLockedMessage;
            _messagesTypes[785] = BreachRoomUnlockResultMessage;
            _messagesTypes[7213] = BreachExitResponseMessage;
            _messagesTypes[6796] = MapComplementaryInformationsBreachMessage;
            _messagesTypes[4800] = BreachGameFightEndMessage;
            _messagesTypes[744] = AnomalyStateMessage;
            _messagesTypes[2772] = MapComplementaryInformationsAnomalyMessage;
            _messagesTypes[4411] = MapFightStartPositionsUpdateMessage;
            _messagesTypes[4091] = GameRolePlayShowActorMessage;
            _messagesTypes[164] = GameRolePlayShowMultipleActorsMessage;
            _messagesTypes[7271] = GameRolePlayShowActorWithEventMessage;
            _messagesTypes[5999] = CharacterStatsListMessage;
            _messagesTypes[7062] = FighterStatsListMessage;
            _messagesTypes[3571] = UpdateSpellModifierMessage;
            _messagesTypes[2947] = CharacterLevelUpMessage;
            _messagesTypes[4152] = CharacterExperienceGainMessage;
            _messagesTypes[6280] = CharacterLevelUpInformationMessage;
            _messagesTypes[6332] = UpdateLifePointsMessage;
            _messagesTypes[5413] = LifePointsRegenBeginMessage;
            _messagesTypes[9290] = LifePointsRegenEndMessage;
            _messagesTypes[3245] = GameRolePlayPlayerLifeStatusMessage;
            _messagesTypes[3186] = GameRolePlayGameOverMessage;
            _messagesTypes[6632] = GameRolePlayFightRequestCanceledMessage;
            _messagesTypes[859] = GameRolePlayAggressionMessage;
            _messagesTypes[9390] = GameRolePlayPlayerFightFriendlyRequestedMessage;
            _messagesTypes[6049] = GameRolePlayPlayerFightFriendlyAnsweredMessage;
            _messagesTypes[4506] = GameRolePlayArenaRegistrationStatusMessage;
            _messagesTypes[5919] = GameRolePlayArenaFightPropositionMessage;
            _messagesTypes[9334] = GameRolePlayArenaFighterStatusMessage;
            _messagesTypes[4914] = GameRolePlayArenaUpdatePlayerInfosMessage;
            _messagesTypes[1579] = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
            _messagesTypes[7137] = GameRolePlayArenaSwitchToFightServerMessage;
            _messagesTypes[3333] = GameRolePlayArenaSwitchToGameServerMessage;
            _messagesTypes[7641] = GameRolePlayArenaInvitationCandidatesAnswerMessage;
            _messagesTypes[7292] = GameRolePlayArenaLeagueRewardsMessage;
            _messagesTypes[8746] = GameRolePlayArenaPlayerBehavioursMessage;
            _messagesTypes[3612] = GameRolePlayArenaRegistrationWarningMessage;
            _messagesTypes[7278] = GameRolePlayMonsterAngryAtPlayerMessage;
            _messagesTypes[4773] = GameRolePlayMonsterNotAngryAtPlayerMessage;
            _messagesTypes[2019] = GameRolePlayShowChallengeMessage;
            _messagesTypes[9776] = GameRolePlayRemoveChallengeMessage;
            _messagesTypes[352] = GameRolePlaySpellAnimMessage;
            _messagesTypes[1527] = GameRolePlayDelayedActionMessage;
            _messagesTypes[326] = GameRolePlayDelayedObjectUseMessage;
            _messagesTypes[731] = GameRolePlayDelayedActionFinishedMessage;
            _messagesTypes[7653] = ShowCellMessage;
            _messagesTypes[8784] = ShowCellSpectatorMessage;
            _messagesTypes[4258] = GameFightStartingMessage;
            _messagesTypes[9683] = GameFightJoinMessage;
            _messagesTypes[9959] = GameFightSpectatorJoinMessage;
            _messagesTypes[4679] = GameFightPlacementPossiblePositionsMessage;
            _messagesTypes[9980] = GameFightPlacementSwapPositionsErrorMessage;
            _messagesTypes[6751] = GameFightPlacementSwapPositionsOfferMessage;
            _messagesTypes[3059] = GameFightPlacementSwapPositionsCancelledMessage;
            _messagesTypes[9546] = GameFightPlacementSwapPositionsMessage;
            _messagesTypes[7421] = GameFightOptionStateUpdateMessage;
            _messagesTypes[8014] = GameFightUpdateTeamMessage;
            _messagesTypes[7125] = GameFightRemoveTeamMemberMessage;
            _messagesTypes[977] = GameFightHumanReadyStateMessage;
            _messagesTypes[51] = GameFightLeaveMessage;
            _messagesTypes[1104] = GameFightStartMessage;
            _messagesTypes[877] = GameFightSpectateMessage;
            _messagesTypes[8002] = GameFightResumeMessage;
            _messagesTypes[3469] = GameFightResumeWithSlavesMessage;
            _messagesTypes[926] = GameFightEndMessage;
            _messagesTypes[3847] = GameFightNewRoundMessage;
            _messagesTypes[8284] = GameFightTurnListMessage;
            _messagesTypes[8133] = GameFightTurnStartMessage;
            _messagesTypes[7403] = GameFightNewWaveMessage;
            _messagesTypes[2787] = GameFightTurnStartPlayingMessage;
            _messagesTypes[6635] = GameFightTurnResumeMessage;
            _messagesTypes[5293] = GameFightPauseMessage;
            _messagesTypes[3183] = SlaveSwitchContextMessage;
            _messagesTypes[767] = SlaveNoLongerControledMessage;
            _messagesTypes[9198] = RefreshCharacterStatsMessage;
            _messagesTypes[2171] = GameFightTurnReadyRequestMessage;
            _messagesTypes[8110] = GameFightSynchronizeMessage;
            _messagesTypes[9102] = GameFightTurnEndMessage;
            _messagesTypes[8950] = GameFightShowFighterMessage;
            _messagesTypes[7817] = GameFightRefreshFighterMessage;
            _messagesTypes[3539] = GameFightShowFighterRandomStaticPoseMessage;
            _messagesTypes[4416] = ArenaFighterLeaveMessage;
            _messagesTypes[1191] = ArenaFighterIdleMessage;
            _messagesTypes[6429] = SequenceStartMessage;
            _messagesTypes[789] = SequenceEndMessage;
            _messagesTypes[5021] = AbstractGameActionMessage;
            _messagesTypes[1870] = GameActionNoopMessage;
            _messagesTypes[5323] = GameActionSpamMessage;
            _messagesTypes[5395] = AbstractGameActionWithAckMessage;
            _messagesTypes[4239] = GameActionFightNoSpellCastMessage;
            _messagesTypes[3907] = AbstractGameActionFightTargetedAbilityMessage;
            _messagesTypes[8547] = GameActionFightSpellCastMessage;
            _messagesTypes[8255] = GameActionFightCloseCombatMessage;
            _messagesTypes[6153] = GameActionUpdateEffectTriggerCountMessage;
            _messagesTypes[163] = GameActionFightInvisibleDetectedMessage;
            _messagesTypes[3191] = GameActionFightPointsVariationMessage;
            _messagesTypes[4186] = GameActionFightTackledMessage;
            _messagesTypes[9040] = GameActionFightDeathMessage;
            _messagesTypes[5848] = GameActionFightKillMessage;
            _messagesTypes[4821] = GameActionFightVanishMessage;
            _messagesTypes[6375] = GameActionFightSpellCooldownVariationMessage;
            _messagesTypes[2] = GameActionFightSpellImmunityMessage;
            _messagesTypes[1401] = GameActionFightLifePointsGainMessage;
            _messagesTypes[7458] = GameActionFightLifePointsLostMessage;
            _messagesTypes[5741] = GameActionFightLifeAndShieldPointsLostMessage;
            _messagesTypes[1806] = GameActionFightDispellableEffectMessage;
            _messagesTypes[6976] = GameActionFightReflectSpellMessage;
            _messagesTypes[6738] = GameActionFightReduceDamagesMessage;
            _messagesTypes[1392] = GameActionFightReflectDamagesMessage;
            _messagesTypes[565] = GameActionFightDodgePointLossMessage;
            _messagesTypes[8123] = GameActionFightSlideMessage;
            _messagesTypes[254] = GameActionFightTeleportOnSameMapMessage;
            _messagesTypes[532] = GameActionFightExchangePositionsMessage;
            _messagesTypes[134] = GameActionFightDispellMessage;
            _messagesTypes[1734] = GameActionFightDispellEffectMessage;
            _messagesTypes[9627] = GameActionFightDispellSpellMessage;
            _messagesTypes[8713] = GameActionFightModifyEffectsDurationMessage;
            _messagesTypes[7466] = GameActionFightTriggerEffectMessage;
            _messagesTypes[2208] = GameActionFightStealKamaMessage;
            _messagesTypes[3593] = GameActionFightChangeLookMessage;
            _messagesTypes[7317] = GameActionFightInvisibilityMessage;
            _messagesTypes[9360] = GameActionFightSummonMessage;
            _messagesTypes[4771] = GameActionFightMultipleSummonMessage;
            _messagesTypes[5119] = GameActionFightMarkCellsMessage;
            _messagesTypes[1537] = GameActionFightUnmarkCellsMessage;
            _messagesTypes[8277] = GameActionFightTriggerGlyphTrapMessage;
            _messagesTypes[8776] = GameActionFightActivateGlyphTrapMessage;
            _messagesTypes[7709] = GameActionFightCarryCharacterMessage;
            _messagesTypes[2098] = GameActionFightThrowCharacterMessage;
            _messagesTypes[3815] = GameActionFightDropCharacterMessage;
            _messagesTypes[2285] = EmoteListMessage;
            _messagesTypes[125] = EmoteAddMessage;
            _messagesTypes[935] = EmoteRemoveMessage;
            _messagesTypes[7765] = EmotePlayAbstractMessage;
            _messagesTypes[6202] = EmotePlayMessage;
            _messagesTypes[944] = EmotePlayMassiveMessage;
            _messagesTypes[5406] = EmotePlayErrorMessage;
            _messagesTypes[4887] = ChatSmileyMessage;
            _messagesTypes[5826] = ChatCommunityChannelCommunityMessage;
            _messagesTypes[4103] = LocalizedChatSmileyMessage;
            _messagesTypes[9669] = MoodSmileyResultMessage;
            _messagesTypes[7148] = MoodSmileyUpdateMessage;
            _messagesTypes[7387] = ChatSmileyExtraPackListMessage;
            _messagesTypes[5869] = ChatAbstractServerMessage;
            _messagesTypes[6616] = ChatServerMessage;
            _messagesTypes[6344] = ChatKolizeumServerMessage;
            _messagesTypes[9217] = ChatAdminServerMessage;
            _messagesTypes[8978] = ChatServerWithObjectMessage;
            _messagesTypes[3216] = ChatServerCopyMessage;
            _messagesTypes[5464] = ChatServerCopyWithObjectMessage;
            _messagesTypes[795] = ChatErrorMessage;
            _messagesTypes[3392] = EnabledChannelsMessage;
            _messagesTypes[913] = ChannelEnablingChangeMessage;
            _messagesTypes[1643] = SpellListMessage;
            _messagesTypes[196] = ForgettableSpellListUpdateMessage;
            _messagesTypes[4292] = ForgettableSpellDeleteMessage;
            _messagesTypes[4610] = ForgettableSpellEquipmentSlotsMessage;
            _messagesTypes[8998] = LeaveDialogMessage;
            _messagesTypes[2494] = PauseDialogMessage;
            _messagesTypes[5807] = InteractiveUseErrorMessage;
            _messagesTypes[4863] = InteractiveUsedMessage;
            _messagesTypes[5252] = InteractiveUseEndedMessage;
            _messagesTypes[8369] = InteractiveMapUpdateMessage;
            _messagesTypes[3429] = StatedMapUpdateMessage;
            _messagesTypes[7269] = InteractiveElementUpdatedMessage;
            _messagesTypes[161] = StatedElementUpdatedMessage;
            _messagesTypes[3763] = ZaapRespawnUpdatedMessage;
            _messagesTypes[5784] = TeleportDestinationsMessage;
            _messagesTypes[5039] = ZaapDestinationsMessage;
            _messagesTypes[8293] = KnownZaapListMessage;
            _messagesTypes[3369] = TeleportBuddiesMessage;
            _messagesTypes[2385] = TeleportBuddiesRequestedMessage;
            _messagesTypes[7405] = TeleportToBuddyOfferMessage;
            _messagesTypes[2820] = TeleportToBuddyCloseMessage;
            _messagesTypes[2847] = SpellVariantActivationMessage;
            _messagesTypes[7915] = StatsUpgradeResultMessage;
            _messagesTypes[5899] = ChallengeTargetsListMessage;
            _messagesTypes[9081] = ChallengeInfoMessage;
            _messagesTypes[8046] = ChallengeTargetUpdateMessage;
            _messagesTypes[6315] = ChallengeResultMessage;
            _messagesTypes[7172] = EntityInformationMessage;
            _messagesTypes[6569] = EntitiesInformationMessage;
            _messagesTypes[1517] = IdolSelectErrorMessage;
            _messagesTypes[3177] = IdolSelectedMessage;
            _messagesTypes[2035] = IdolListMessage;
            _messagesTypes[2675] = IdolPartyRefreshMessage;
            _messagesTypes[7319] = IdolPartyLostMessage;
            _messagesTypes[1898] = IdolFightPreparationUpdateMessage;
            _messagesTypes[8883] = AchievementListMessage;
            _messagesTypes[2370] = AchievementDetailsMessage;
            _messagesTypes[9336] = AchievementDetailedListMessage;
            _messagesTypes[7634] = AchievementAlmostFinishedDetailedListMessage;
            _messagesTypes[477] = AchievementFinishedMessage;
            _messagesTypes[1571] = AchievementFinishedInformationMessage;
            _messagesTypes[9912] = AchievementRewardSuccessMessage;
            _messagesTypes[1735] = AchievementRewardErrorMessage;
            _messagesTypes[2747] = FriendGuildWarnOnAchievementCompleteStateMessage;
            _messagesTypes[8832] = DungeonKeyRingMessage;
            _messagesTypes[9465] = DungeonKeyRingUpdateMessage;
            _messagesTypes[6009] = UpdateMapPlayersAgressableStatusMessage;
            _messagesTypes[9304] = UpdateSelfAgressableStatusMessage;
            _messagesTypes[5002] = AlignmentRankUpdateMessage;
            _messagesTypes[7684] = CompassResetMessage;
            _messagesTypes[1071] = CompassUpdateMessage;
            _messagesTypes[6977] = CompassUpdatePartyMemberMessage;
            _messagesTypes[3444] = AtlasPointInformationsMessage;
            _messagesTypes[870] = CompassUpdatePvpSeekMessage;
            _messagesTypes[7453] = AbstractPartyMessage;
            _messagesTypes[2894] = AbstractPartyEventMessage;
            _messagesTypes[4804] = PartyModifiableStatusMessage;
            _messagesTypes[3700] = PartyInvitationMessage;
            _messagesTypes[7746] = PartyInvitationDungeonMessage;
            _messagesTypes[3572] = PartyInvitationDetailsMessage;
            _messagesTypes[538] = PartyInvitationDungeonDetailsMessage;
            _messagesTypes[9440] = PartyInvitationCancelledForGuestMessage;
            _messagesTypes[9668] = PartyCancelInvitationNotificationMessage;
            _messagesTypes[48] = PartyRefuseInvitationNotificationMessage;
            _messagesTypes[9924] = PartyCannotJoinErrorMessage;
            _messagesTypes[173] = PartyJoinMessage;
            _messagesTypes[3505] = PartyNewGuestMessage;
            _messagesTypes[655] = PartyUpdateMessage;
            _messagesTypes[4864] = PartyNewMemberMessage;
            _messagesTypes[7288] = PartyUpdateLightMessage;
            _messagesTypes[5561] = PartyEntityUpdateLightMessage;
            _messagesTypes[6552] = PartyMemberRemoveMessage;
            _messagesTypes[2366] = PartyMemberEjectedMessage;
            _messagesTypes[8674] = PartyLeaderUpdateMessage;
            _messagesTypes[2822] = PartyFollowStatusUpdateMessage;
            _messagesTypes[2407] = PartyLocateMembersMessage;
            _messagesTypes[9615] = PartyLeaveMessage;
            _messagesTypes[3133] = PartyKickedByMessage;
            _messagesTypes[1989] = PartyRestrictedMessage;
            _messagesTypes[1274] = PartyDeletedMessage;
            _messagesTypes[9640] = PartyLoyaltyStatusMessage;
            _messagesTypes[719] = AbstractPartyMemberInFightMessage;
            _messagesTypes[6329] = PartyMemberInStandardFightMessage;
            _messagesTypes[9562] = PartyMemberInBreachFightMessage;
            _messagesTypes[1722] = PartyNameUpdateMessage;
            _messagesTypes[7245] = PartyNameSetErrorMessage;
            _messagesTypes[905] = DungeonPartyFinderAvailableDungeonsMessage;
            _messagesTypes[14] = DungeonPartyFinderListenErrorMessage;
            _messagesTypes[9790] = DungeonPartyFinderRoomContentMessage;
            _messagesTypes[3748] = DungeonPartyFinderRoomContentUpdateMessage;
            _messagesTypes[818] = DungeonPartyFinderRegisterSuccessMessage;
            _messagesTypes[2679] = DungeonPartyFinderRegisterErrorMessage;
            _messagesTypes[9652] = ContactAddFailureMessage;
            _messagesTypes[2873] = SpouseStatusMessage;
            _messagesTypes[5668] = FriendsListMessage;
            _messagesTypes[2364] = AcquaintancesListMessage;
            _messagesTypes[626] = SpouseInformationsMessage;
            _messagesTypes[7228] = FriendAddFailureMessage;
            _messagesTypes[4138] = AcquaintanceAddedMessage;
            _messagesTypes[4459] = FriendAddedMessage;
            _messagesTypes[9234] = FriendUpdateMessage;
            _messagesTypes[3202] = FriendDeleteResultMessage;
            _messagesTypes[6212] = FriendWarnOnConnectionStateMessage;
            _messagesTypes[5693] = WarnOnPermaDeathStateMessage;
            _messagesTypes[9245] = FriendWarnOnLevelGainStateMessage;
            _messagesTypes[5158] = FriendStatusShareStateMessage;
            _messagesTypes[5355] = IgnoredListMessage;
            _messagesTypes[6915] = IgnoredAddFailureMessage;
            _messagesTypes[4693] = IgnoredAddedMessage;
            _messagesTypes[5953] = IgnoredDeleteResultMessage;
            _messagesTypes[8564] = AllianceCreationStartedMessage;
            _messagesTypes[6090] = AllianceModificationStartedMessage;
            _messagesTypes[972] = AllianceCreationResultMessage;
            _messagesTypes[5780] = AllianceInvitedMessage;
            _messagesTypes[488] = AllianceInvitationStateRecruterMessage;
            _messagesTypes[2163] = AllianceInvitationStateRecrutedMessage;
            _messagesTypes[8664] = AllianceJoinedMessage;
            _messagesTypes[3695] = AllianceGuildLeavingMessage;
            _messagesTypes[1151] = AllianceLeftMessage;
            _messagesTypes[4388] = AllianceMembershipMessage;
            _messagesTypes[1498] = AllianceSummaryMessage;
            _messagesTypes[4845] = KohUpdateMessage;
            _messagesTypes[4950] = AreaFightModificatorUpdateMessage;
            _messagesTypes[4406] = ClientUIOpenedMessage;
            _messagesTypes[6561] = ClientUIOpenedByObjectMessage;
            _messagesTypes[18] = GuildLogbookInformationMessage;
            _messagesTypes[6936] = GuildSummaryMessage;
            _messagesTypes[7173] = GuildCreationStartedMessage;
            _messagesTypes[42] = GuildModificationStartedMessage;
            _messagesTypes[1810] = GuildCreationResultMessage;
            _messagesTypes[3054] = GuildInvitedMessage;
            _messagesTypes[7285] = GuildInvitationStateRecruterMessage;
            _messagesTypes[2210] = GuildInvitationStateRecrutedMessage;
            _messagesTypes[3038] = GuildJoinedMessage;
            _messagesTypes[4749] = GuildMemberOnlineStatusMessage;
            _messagesTypes[8117] = GuildInformationsGeneralMessage;
            _messagesTypes[4354] = GuildInformationsMembersMessage;
            _messagesTypes[9483] = GuildInformationsMemberUpdateMessage;
            _messagesTypes[7180] = GuildInformationsPaddocksMessage;
            _messagesTypes[4785] = GuildMemberLeavingMessage;
            _messagesTypes[4339] = GuildLeftMessage;
            _messagesTypes[152] = GuildMembershipMessage;
            _messagesTypes[4768] = GuildLevelUpMessage;
            _messagesTypes[6531] = GuildInfosUpgradeMessage;
            _messagesTypes[5824] = GuildHousesInformationMessage;
            _messagesTypes[6020] = GuildHouseUpdateInformationMessage;
            _messagesTypes[662] = GuildHouseRemoveMessage;
            _messagesTypes[4684] = GuildPaddockBoughtMessage;
            _messagesTypes[5498] = GuildPaddockRemovedMessage;
            _messagesTypes[7929] = GuildMemberWarnOnConnectionStateMessage;
            _messagesTypes[7773] = GuildMotdMessage;
            _messagesTypes[5399] = GuildMotdSetErrorMessage;
            _messagesTypes[3999] = GuildBulletinMessage;
            _messagesTypes[5001] = GuildBulletinSetErrorMessage;
            _messagesTypes[900] = GuildFactsErrorMessage;
            _messagesTypes[2056] = GuildFactsMessage;
            _messagesTypes[641] = GuildInAllianceFactsMessage;
            _messagesTypes[654] = GuildRanksMessage;
            _messagesTypes[7306] = AllianceFactsErrorMessage;
            _messagesTypes[856] = AllianceFactsMessage;
            _messagesTypes[4050] = GuildListMessage;
            _messagesTypes[8253] = GuildVersatileInfoListMessage;
            _messagesTypes[5093] = AllianceListMessage;
            _messagesTypes[4110] = AlliancePartialListMessage;
            _messagesTypes[1576] = AllianceInsiderInfoMessage;
            _messagesTypes[6414] = AllianceMotdMessage;
            _messagesTypes[9218] = AllianceMotdSetErrorMessage;
            _messagesTypes[5644] = AllianceBulletinMessage;
            _messagesTypes[7797] = AllianceBulletinSetErrorMessage;
            _messagesTypes[7700] = TaxCollectorMovementMessage;
            _messagesTypes[6734] = TaxCollectorErrorMessage;
            _messagesTypes[7587] = AbstractTaxCollectorListMessage;
            _messagesTypes[8306] = TaxCollectorListMessage;
            _messagesTypes[7142] = TopTaxCollectorListMessage;
            _messagesTypes[5765] = TaxCollectorStateUpdateMessage;
            _messagesTypes[6474] = TaxCollectorMovementAddMessage;
            _messagesTypes[5053] = TaxCollectorMovementRemoveMessage;
            _messagesTypes[2829] = TaxCollectorAttackedMessage;
            _messagesTypes[2059] = TaxCollectorAttackedResultMessage;
            _messagesTypes[7171] = GuildFightPlayersHelpersJoinMessage;
            _messagesTypes[3921] = GuildFightPlayersHelpersLeaveMessage;
            _messagesTypes[9474] = GuildFightPlayersEnemiesListMessage;
            _messagesTypes[6549] = GuildFightPlayersEnemyRemoveMessage;
            _messagesTypes[2120] = TaxCollectorMovementsOfflineMessage;
            _messagesTypes[389] = RecruitmentInformationMessage;
            _messagesTypes[4279] = GuildRecruitmentInvalidateMessage;
            _messagesTypes[3013] = GuildApplicationDeletedMessage;
            _messagesTypes[6199] = GuildPlayerApplicationAbstractMessage;
            _messagesTypes[1973] = GuildPlayerApplicationInformationMessage;
            _messagesTypes[6700] = GuildPlayerNoApplicationInformationMessage;
            _messagesTypes[5489] = GuildApplicationIsAnsweredMessage;
            _messagesTypes[8951] = GuildListApplicationAnswerMessage;
            _messagesTypes[6394] = GuildListApplicationModifiedMessage;
            _messagesTypes[3617] = GuildApplicationReceivedMessage;
            _messagesTypes[4943] = ListenersOfSynchronizedStorageMessage;
            _messagesTypes[3542] = AddListenerOnSynchronizedStorageMessage;
            _messagesTypes[4295] = RemoveListenerOnSynchronizedStorageMessage;
            _messagesTypes[2030] = PrismSetSabotagedRefusedMessage;
            _messagesTypes[9148] = PrismFightDefenderAddMessage;
            _messagesTypes[4782] = PrismFightDefenderLeaveMessage;
            _messagesTypes[186] = PrismFightAttackerAddMessage;
            _messagesTypes[5185] = PrismFightAttackerRemoveMessage;
            _messagesTypes[6409] = PrismsListMessage;
            _messagesTypes[963] = PrismsListUpdateMessage;
            _messagesTypes[3654] = ChallengeFightJoinRefusedMessage;
            _messagesTypes[5030] = PrismInfoCloseMessage;
            _messagesTypes[1813] = PrismsInfoValidMessage;
            _messagesTypes[869] = PrismFightAddedMessage;
            _messagesTypes[3740] = PrismFightRemovedMessage;
            _messagesTypes[2840] = PrismInfoInValidMessage;
            _messagesTypes[2807] = PrismFightStateUpdateMessage;
            _messagesTypes[9410] = PrismSettingsErrorMessage;
            _messagesTypes[8060] = QuestListMessage;
            _messagesTypes[7941] = QuestStartedMessage;
            _messagesTypes[6566] = QuestValidatedMessage;
            _messagesTypes[3998] = QuestObjectiveValidatedMessage;
            _messagesTypes[3297] = QuestStepValidatedMessage;
            _messagesTypes[710] = QuestStepStartedMessage;
            _messagesTypes[128] = QuestStepInfoMessage;
            _messagesTypes[9620] = FollowedQuestsMessage;
            _messagesTypes[2231] = WatchQuestStepInfoMessage;
            _messagesTypes[248] = WatchQuestListMessage;
            _messagesTypes[7406] = NotificationListMessage;
            _messagesTypes[446] = NotificationByServerMessage;
            _messagesTypes[7007] = SubscriptionLimitationMessage;
            _messagesTypes[9409] = SubscriptionZoneMessage;
            _messagesTypes[5890] = GuestLimitationMessage;
            _messagesTypes[1368] = GuestModeMessage;
            _messagesTypes[3327] = ListMapNpcsQuestStatusUpdateMessage;
            _messagesTypes[7314] = NpcGenericActionFailureMessage;
            _messagesTypes[5809] = PortalDialogCreationMessage;
            _messagesTypes[3026] = NpcDialogCreationMessage;
            _messagesTypes[5086] = NpcDialogQuestionMessage;
            _messagesTypes[2232] = TaxCollectorDialogQuestionBasicMessage;
            _messagesTypes[7544] = TaxCollectorDialogQuestionExtendedMessage;
            _messagesTypes[9943] = AllianceTaxCollectorDialogQuestionExtendedMessage;
            _messagesTypes[5717] = AlliancePrismDialogQuestionMessage;
            _messagesTypes[3563] = EntityTalkMessage;
            _messagesTypes[8350] = JobDescriptionMessage;
            _messagesTypes[5738] = JobLevelUpMessage;
            _messagesTypes[2910] = JobExperienceMultiUpdateMessage;
            _messagesTypes[6841] = JobExperienceUpdateMessage;
            _messagesTypes[7238] = JobExperienceOtherPlayerUpdateMessage;
            _messagesTypes[5245] = JobAllowMultiCraftRequestMessage;
            _messagesTypes[1387] = JobMultiCraftAvailableSkillsMessage;
            _messagesTypes[5459] = JobCrafterDirectoryListMessage;
            _messagesTypes[4970] = JobCrafterDirectorySettingsMessage;
            _messagesTypes[1919] = JobBookSubscriptionMessage;
            _messagesTypes[9808] = JobCrafterDirectoryRemoveMessage;
            _messagesTypes[361] = JobCrafterDirectoryAddMessage;
            _messagesTypes[46] = JobCrafterDirectoryEntryMessage;
            _messagesTypes[1942] = KamasUpdateMessage;
            _messagesTypes[7502] = ObjectGroundAddedMessage;
            _messagesTypes[6008] = ObjectGroundListAddedMessage;
            _messagesTypes[3857] = ObjectGroundRemovedMessage;
            _messagesTypes[5631] = ObjectGroundRemovedMultipleMessage;
            _messagesTypes[5728] = InventoryContentMessage;
            _messagesTypes[3242] = WatchInventoryContentMessage;
            _messagesTypes[3051] = ShortcutBarContentMessage;
            _messagesTypes[6612] = ShortcutBarAddErrorMessage;
            _messagesTypes[2220] = ShortcutBarRemoveErrorMessage;
            _messagesTypes[6469] = ShortcutBarSwapErrorMessage;
            _messagesTypes[1952] = ShortcutBarRefreshMessage;
            _messagesTypes[4234] = ShortcutBarRemovedMessage;
            _messagesTypes[9311] = ShortcutBarReplacedMessage;
            _messagesTypes[7367] = StorageInventoryContentMessage;
            _messagesTypes[8809] = StorageKamasUpdateMessage;
            _messagesTypes[7645] = StorageObjectUpdateMessage;
            _messagesTypes[7581] = StorageObjectsUpdateMessage;
            _messagesTypes[3257] = StorageObjectRemoveMessage;
            _messagesTypes[7481] = StorageObjectsRemoveMessage;
            _messagesTypes[659] = SetUpdateMessage;
            _messagesTypes[5132] = InventoryWeightMessage;
            _messagesTypes[4619] = ObjectMovementMessage;
            _messagesTypes[1502] = ObjectAddedMessage;
            _messagesTypes[5747] = ObjectsAddedMessage;
            _messagesTypes[952] = GoldAddedMessage;
            _messagesTypes[2565] = ObjectErrorMessage;
            _messagesTypes[8380] = ObjectDeletedMessage;
            _messagesTypes[7965] = ObjectsDeletedMessage;
            _messagesTypes[236] = ObjectQuantityMessage;
            _messagesTypes[4465] = ObjectsQuantityMessage;
            _messagesTypes[8645] = ObjectModifiedMessage;
            _messagesTypes[2143] = ObjectJobAddedMessage;
            _messagesTypes[4398] = ObtainedItemMessage;
            _messagesTypes[4742] = ObtainedItemWithBonusMessage;
            _messagesTypes[8592] = LivingObjectMessageMessage;
            _messagesTypes[8979] = SymbioticObjectErrorMessage;
            _messagesTypes[5834] = SymbioticObjectAssociatedMessage;
            _messagesTypes[2455] = WrapperObjectErrorMessage;
            _messagesTypes[3968] = WrapperObjectAssociatedMessage;
            _messagesTypes[8839] = MimicryObjectPreviewMessage;
            _messagesTypes[7201] = MimicryObjectErrorMessage;
            _messagesTypes[5684] = MimicryObjectAssociatedMessage;
            _messagesTypes[11] = InvalidPresetsMessage;
            _messagesTypes[9953] = PresetsMessage;
            _messagesTypes[5829] = ItemForPresetUpdateMessage;
            _messagesTypes[343] = PresetSavedMessage;
            _messagesTypes[9650] = PresetSaveErrorMessage;
            _messagesTypes[3796] = PresetDeleteResultMessage;
            _messagesTypes[3285] = PresetUseResultMessage;
            _messagesTypes[8990] = PresetUseResultWithMissingIdsMessage;
            _messagesTypes[5078] = ExchangeMoneyMovementInformationMessage;
            _messagesTypes[1768] = ExchangeCraftCountModifiedMessage;
            _messagesTypes[8022] = ExchangeObjectMessage;
            _messagesTypes[4271] = ExchangeObjectAddedMessage;
            _messagesTypes[5748] = ExchangeObjectsAddedMessage;
            _messagesTypes[5163] = ExchangeObjectRemovedMessage;
            _messagesTypes[6568] = ExchangeObjectsRemovedMessage;
            _messagesTypes[7130] = ExchangeObjectModifiedMessage;
            _messagesTypes[3117] = ExchangeObjectsModifiedMessage;
            _messagesTypes[6045] = ExchangeObjectPutInBagMessage;
            _messagesTypes[7540] = ExchangeObjectRemovedFromBagMessage;
            _messagesTypes[3514] = ExchangeObjectModifiedInBagMessage;
            _messagesTypes[9219] = ExchangeKamaModifiedMessage;
            _messagesTypes[6288] = ExchangePodsModifiedMessage;
            _messagesTypes[3456] = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
            _messagesTypes[7275] = ExchangeRequestedMessage;
            _messagesTypes[7825] = ExchangeRequestedTradeMessage;
            _messagesTypes[1152] = ExchangeStartedMessage;
            _messagesTypes[8848] = ExchangeStartedWithPodsMessage;
            _messagesTypes[8643] = ExchangeStartedWithStorageMessage;
            _messagesTypes[5094] = ExchangeBidHouseBuyResultMessage;
            _messagesTypes[8417] = ExchangeBidHouseItemAddOkMessage;
            _messagesTypes[1545] = ExchangeBidHouseItemRemoveOkMessage;
            _messagesTypes[9173] = ExchangeBidHouseGenericItemAddedMessage;
            _messagesTypes[671] = ExchangeBidHouseGenericItemRemovedMessage;
            _messagesTypes[983] = ExchangeBidHouseInListAddedMessage;
            _messagesTypes[1129] = ExchangeBidHouseInListUpdatedMessage;
            _messagesTypes[5319] = ExchangeBidHouseInListRemovedMessage;
            _messagesTypes[2086] = ExchangeBidHouseUnsoldItemsMessage;
            _messagesTypes[578] = ExchangeOfflineSoldItemsMessage;
            _messagesTypes[4206] = ExchangeIsReadyMessage;
            _messagesTypes[1727] = ExchangeStoppedMessage;
            _messagesTypes[6342] = ExchangeErrorMessage;
            _messagesTypes[25] = ExchangeLeaveMessage;
            _messagesTypes[6910] = DecraftResultMessage;
            _messagesTypes[3574] = RecycleResultMessage;
            _messagesTypes[7156] = ExchangeStartOkNpcTradeMessage;
            _messagesTypes[486] = ExchangeStartOkRunesTradeMessage;
            _messagesTypes[6390] = ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
            _messagesTypes[4345] = EvolutiveObjectRecycleResultMessage;
            _messagesTypes[6600] = ExchangeStartOkRecycleTradeMessage;
            _messagesTypes[9121] = ExchangeStartOkNpcShopMessage;
            _messagesTypes[6666] = ExchangeOkMultiCraftMessage;
            _messagesTypes[1641] = ExchangeCraftResultMessage;
            _messagesTypes[7889] = ExchangeCraftResultWithObjectIdMessage;
            _messagesTypes[2292] = ExchangeCraftResultWithObjectDescMessage;
            _messagesTypes[4064] = ExchangeCraftResultMagicWithObjectDescMessage;
            _messagesTypes[4501] = ExchangeStartOkHumanVendorMessage;
            _messagesTypes[1955] = ExchangeShopStockStartedMessage;
            _messagesTypes[8808] = ExchangeShopStockMovementUpdatedMessage;
            _messagesTypes[5274] = ExchangeShopStockMultiMovementUpdatedMessage;
            _messagesTypes[1337] = ExchangeShopStockMovementRemovedMessage;
            _messagesTypes[928] = ExchangeShopStockMultiMovementRemovedMessage;
            _messagesTypes[7754] = ExchangeStartedMountStockMessage;
            _messagesTypes[8281] = ExchangeStartedTaxCollectorShopMessage;
            _messagesTypes[3171] = ExchangeStartedBidSellerMessage;
            _messagesTypes[5335] = ExchangeStartedBidBuyerMessage;
            _messagesTypes[9292] = ExchangeBidPriceMessage;
            _messagesTypes[4930] = ExchangeBidPriceForSellerMessage;
            _messagesTypes[3143] = ExchangeTypesExchangerDescriptionForUserMessage;
            _messagesTypes[6413] = ExchangeTypesItemsExchangerDescriptionForUserMessage;
            _messagesTypes[4708] = ExchangeWeightMessage;
            _messagesTypes[1634] = ExchangeGuildTaxCollectorGetMessage;
            _messagesTypes[9162] = ItemNoMoreAvailableMessage;
            _messagesTypes[7612] = ExchangeBuyOkMessage;
            _messagesTypes[6171] = ExchangeSellOkMessage;
            _messagesTypes[4370] = ExchangeReplyTaxVendorMessage;
            _messagesTypes[2689] = ExchangeWaitingResultMessage;
            _messagesTypes[3486] = ExchangeStartOkMountWithOutPaddockMessage;
            _messagesTypes[4995] = ExchangeStartOkMountMessage;
            _messagesTypes[8504] = ExchangeMountStableErrorMessage;
            _messagesTypes[9220] = ExchangeMountsStableAddMessage;
            _messagesTypes[3945] = ExchangeMountsPaddockAddMessage;
            _messagesTypes[9748] = ExchangeMountsStableBornAddMessage;
            _messagesTypes[9111] = ExchangeMountsStableRemoveMessage;
            _messagesTypes[4228] = ExchangeMountsPaddockRemoveMessage;
            _messagesTypes[247] = ExchangeMountsTakenFromPaddockMessage;
            _messagesTypes[734] = ExchangeMountFreeFromPaddockMessage;
            _messagesTypes[1120] = ExchangeMountSterilizeFromPaddockMessage;
            _messagesTypes[9528] = ExchangeBidSearchOkMessage;
            _messagesTypes[8259] = ExchangeItemAutoCraftStopedMessage;
            _messagesTypes[9753] = ExchangeStartOkCraftMessage;
            _messagesTypes[1175] = ExchangeStartOkCraftWithInformationMessage;
            _messagesTypes[9876] = ExchangeStartOkMulticraftCrafterMessage;
            _messagesTypes[213] = ExchangeStartOkMulticraftCustomerMessage;
            _messagesTypes[3798] = ExchangeCrafterJobLevelupMessage;
            _messagesTypes[6946] = ExchangeStartOkJobIndexMessage;
            _messagesTypes[3524] = ExchangeCraftPaymentModifiedMessage;
            _messagesTypes[1465] = UpdateMountCharacteristicsMessage;
            _messagesTypes[5743] = ObjectAveragePricesErrorMessage;
            _messagesTypes[1345] = ObjectAveragePricesMessage;
            _messagesTypes[4876] = PurchasableDialogMessage;
            _messagesTypes[2587] = AccountHouseMessage;
            _messagesTypes[1927] = HousePropertiesMessage;
            _messagesTypes[865] = HouseBuyResultMessage;
            _messagesTypes[1690] = HouseSellingUpdateMessage;
            _messagesTypes[61] = HouseToSellListMessage;
            _messagesTypes[2793] = HouseGuildNoneMessage;
            _messagesTypes[3825] = HouseGuildRightsMessage;
            _messagesTypes[2118] = PaddockBuyResultMessage;
            _messagesTypes[1699] = PaddockPropertiesMessage;
            _messagesTypes[5590] = PaddockSellBuyDialogMessage;
            _messagesTypes[4337] = GameDataPlayFarmObjectAnimationMessage;
            _messagesTypes[5846] = PaddockToSellListMessage;
            _messagesTypes[4038] = HavenBagRoomUpdateMessage;
            _messagesTypes[3768] = HavenBagPackListMessage;
            _messagesTypes[8765] = EditHavenBagStartMessage;
            _messagesTypes[9401] = EditHavenBagFinishedMessage;
            _messagesTypes[8173] = HavenBagDailyLoteryMessage;
            _messagesTypes[7036] = HavenBagFurnituresMessage;
            _messagesTypes[9202] = MapComplementaryInformationsDataInHavenBagMessage;
            _messagesTypes[1548] = HavenBagPermissionsUpdateMessage;
            _messagesTypes[1797] = InviteInHavenBagClosedMessage;
            _messagesTypes[924] = InviteInHavenBagMessage;
            _messagesTypes[533] = InviteInHavenBagOfferMessage;
            _messagesTypes[2352] = MountSterilizedMessage;
            _messagesTypes[5099] = MountReleasedMessage;
            _messagesTypes[2783] = MountRenamedMessage;
            _messagesTypes[4951] = MountXpRatioMessage;
            _messagesTypes[4807] = MountDataMessage;
            _messagesTypes[6735] = MountDataErrorMessage;
            _messagesTypes[1014] = MountSetMessage;
            _messagesTypes[3974] = MountUnSetMessage;
            _messagesTypes[1286] = MountEquipedErrorMessage;
            _messagesTypes[7855] = MountRidingMessage;
            _messagesTypes[2508] = GameDataPaddockObjectRemoveMessage;
            _messagesTypes[6633] = GameDataPaddockObjectAddMessage;
            _messagesTypes[2631] = GameDataPaddockObjectListAddMessage;
            _messagesTypes[7806] = MountEmoteIconUsedOkMessage;
            _messagesTypes[2498] = LockableShowCodeDialogMessage;
            _messagesTypes[9699] = LockableCodeResultMessage;
            _messagesTypes[3157] = LockableStateUpdateAbstractMessage;
            _messagesTypes[5212] = LockableStateUpdateHouseDoorMessage;
            _messagesTypes[4141] = LockableStateUpdateStorageMessage;
            _messagesTypes[5863] = DocumentReadingBeginMessage;
            _messagesTypes[3062] = TitlesAndOrnamentsListMessage;
            _messagesTypes[776] = TitleGainedMessage;
            _messagesTypes[8462] = TitleLostMessage;
            _messagesTypes[7515] = OrnamentGainedMessage;
            _messagesTypes[2227] = OrnamentLostMessage;
            _messagesTypes[2339] = TitleSelectedMessage;
            _messagesTypes[2913] = TitleSelectErrorMessage;
            _messagesTypes[8298] = OrnamentSelectedMessage;
            _messagesTypes[9700] = OrnamentSelectErrorMessage;
            _messagesTypes[2219] = ContactLookMessage;
            _messagesTypes[607] = ContactLookErrorMessage;
            _messagesTypes[373] = SocialNoticeMessage;
            _messagesTypes[6305] = BulletinMessage;
            _messagesTypes[1841] = SocialNoticeSetErrorMessage;
            _messagesTypes[1259] = AccessoryPreviewErrorMessage;
            _messagesTypes[5437] = AccessoryPreviewMessage;
            _messagesTypes[1270] = HaapiBufferListMessage;
            _messagesTypes[9629] = HaapiConfirmationMessage;
            _messagesTypes[6268] = HaapiValidationMessage;
            _messagesTypes[702] = HaapiBuyValidationMessage;
            _messagesTypes[4651] = HaapiApiKeyMessage;
            _messagesTypes[1868] = HaapiShopApiKeyMessage;
            _messagesTypes[7252] = FinishMoveListMessage;
            _messagesTypes[2217] = TreasureHuntShowLegendaryUIMessage;
            _messagesTypes[9930] = TreasureHuntRequestAnswerMessage;
            _messagesTypes[7636] = TreasureHuntMessage;
            _messagesTypes[3580] = TreasureHuntFinishedMessage;
            _messagesTypes[3683] = TreasureHuntDigRequestAnswerMessage;
            _messagesTypes[4504] = TreasureHuntDigRequestAnswerFailedMessage;
            _messagesTypes[9557] = TreasureHuntFlagRequestAnswerMessage;
            _messagesTypes[8314] = TreasureHuntAvailableRetryCountUpdateMessage;
            _messagesTypes[1081] = BreachStateMessage;
            _messagesTypes[494] = BreachCharactersMessage;
            _messagesTypes[712] = BreachBonusMessage;
            _messagesTypes[5217] = BreachBudgetMessage;
            _messagesTypes[8058] = BreachSavedMessage;
            _messagesTypes[7338] = BreachBranchesMessage;
            _messagesTypes[5450] = BreachRewardsMessage;
            _messagesTypes[8247] = BreachRewardBoughtMessage;
            _messagesTypes[4810] = BreachInvitationOfferMessage;
            _messagesTypes[7392] = BreachInvitationResponseMessage;
            _messagesTypes[3193] = BreachInvitationCloseMessage;
            _messagesTypes[2708] = BreachKickResponseMessage;
            _messagesTypes[9504] = AnomalySubareaInformationResponseMessage;
            _messagesTypes[2974] = AlignmentWarEffortProgressionMessage;
            _messagesTypes[9744] = CharacterAlignmentWarEffortProgressionMessage;
            _messagesTypes[3897] = AlignmentWarEffortDonatePreviewMessage;
            _messagesTypes[1322] = AlignmentWarEffortDonationResultMessage;
            _messagesTypes[594] = HaapiTokenMessage;
            _messagesTypes[4046] = HaapiAuthErrorMessage;
            _messagesTypes[1276] = HaapiSessionMessage;
            _messagesTypes[6271] = DebtsUpdateMessage;
            _messagesTypes[2396] = DebtsDeleteMessage;
            _messagesTypes[9407] = ActivitySuggestionsMessage;
            _unpackModes[2180] = UnpackMode.ASYNC;
        }
        
        public function MessageReceiver()
        {
            super();
        }
        
        public static function register() : void
        {
            StoreDataManager.getInstance().registerClass(new PaginationAnswerAbstractMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NetworkDataContainerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ProtocolRequired(),true,true);
            StoreDataManager.getInstance().registerClass(new LoginQueueStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QueueStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ConsoleMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ConsoleCommandsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HelloConnectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CredentialsAcknowledgementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NicknameRegistrationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountLinkRequiredMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NicknameRefusedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NicknameAcceptedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentificationSuccessMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentificationSuccessWithLoginTokenMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedBannedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedForBadVersionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServersListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerStatusUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SelectedServerDataMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SelectedServerDataExtendedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SelectedServerRefusedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceSearchErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceServerListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MigratedServerListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HelloGameMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AuthenticationTicketAcceptedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AuthenticationTicketRefusedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlreadyConnectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountLoggingKickedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ReloginTokenStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSettingsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSessionConstantsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerOptionalFeaturesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountCapabilitiesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TrustStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountInformationsUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CheckFileRequestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new RawDataMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StartupActionsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StartupActionAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StartupActionFinishedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCanBeCreatedResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCreationResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterDeletionErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionSuccessMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionFailureMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicCharactersListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharactersListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharactersListWithRemodelingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharactersListErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedSuccessMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedForceMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PopupWarningMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PopupWarningClosedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicDateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicTimeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlmanachCalendarDateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicNoOperationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicAckMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SystemMessageDisplayMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TextInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new OnConnectionEventMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SetCharacterRestrictionsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerExperienceModificatorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCapabilitiesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterLoadingCompleteMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextCreateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextCreateErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextDestroyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveElementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveElementWithEventMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsWithEventsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextMoveElementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextMoveMultipleElementsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextRefreshEntityLookMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameMapSpeedMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameMapNoMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameMapMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameCautiousMapMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameEntityDispositionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameEntitiesDispositionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameEntityDispositionErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRefreshMonsterBoostsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicWhoIsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicWhoIsNoMatchMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NumericWhoIsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicPongMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicLatencyStatsRequestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SequenceNumberRequestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CurrentServerStatusUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CinematicMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DumpedEntityStatsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DebugHighlightCellsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DebugClearHighlightCellsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DebugInClientMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ClientYouAreDrunkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DisplayNumericalValuePaddockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CurrentMapMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CurrentMapInstanceMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportOnSameMapMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapFightCountMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapRunningFightListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsExtendedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapObstacleUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHouseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsWithCoordsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapRewardRateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachEnterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachTeleportResponseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachRoomLockedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachRoomUnlockResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachExitResponseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsBreachMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachGameFightEndMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AnomalyStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsAnomalyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapFightStartPositionsUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowMultipleActorsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorWithEventMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterStatsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FighterStatsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateSpellModifierMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterLevelUpMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterExperienceGainMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterLevelUpInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateLifePointsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LifePointsRegenBeginMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LifePointsRegenEndMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerLifeStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGameOverMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayFightRequestCanceledMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayAggressionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyRequestedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyAnsweredMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFightPropositionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFighterStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToFightServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToGameServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaInvitationCandidatesAnswerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaLeagueRewardsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaPlayerBehavioursMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationWarningMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterAngryAtPlayerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterNotAngryAtPlayerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowChallengeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayRemoveChallengeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlaySpellAnimMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedObjectUseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionFinishedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShowCellMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShowCellSpectatorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightStartingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightJoinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightSpectatorJoinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementPossiblePositionsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsOfferMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsCancelledMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightOptionStateUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightUpdateTeamMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightRemoveTeamMemberMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightHumanReadyStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightStartMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightSpectateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightResumeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightResumeWithSlavesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightEndMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightNewRoundMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnStartMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightNewWaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnStartPlayingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnResumeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightPauseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SlaveSwitchContextMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SlaveNoLongerControledMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new RefreshCharacterStatsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnReadyRequestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightSynchronizeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnEndMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightShowFighterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightRefreshFighterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightShowFighterRandomStaticPoseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ArenaFighterLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ArenaFighterIdleMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SequenceStartMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SequenceEndMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionNoopMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionSpamMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionWithAckMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightNoSpellCastMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionFightTargetedAbilityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellCastMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightCloseCombatMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionUpdateEffectTriggerCountMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightInvisibleDetectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightPointsVariationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTackledMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDeathMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightKillMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightVanishMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellCooldownVariationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellImmunityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsGainMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsLostMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifeAndShieldPointsLostMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellableEffectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReflectSpellMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReduceDamagesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReflectDamagesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDodgePointLossMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSlideMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTeleportOnSameMapMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightExchangePositionsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellEffectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellSpellMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightModifyEffectsDurationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTriggerEffectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightStealKamaMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightChangeLookMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightInvisibilityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSummonMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightMultipleSummonMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightMarkCellsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightUnmarkCellsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTriggerGlyphTrapMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightActivateGlyphTrapMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightCarryCharacterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightThrowCharacterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDropCharacterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmoteListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmoteAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmoteRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmotePlayAbstractMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmotePlayMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmotePlayMassiveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EmotePlayErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatSmileyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatCommunityChannelCommunityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LocalizedChatSmileyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MoodSmileyResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MoodSmileyUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatSmileyExtraPackListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatAbstractServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatKolizeumServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatAdminServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatServerWithObjectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatServerCopyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatServerCopyWithObjectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChatErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EnabledChannelsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChannelEnablingChangeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SpellListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ForgettableSpellListUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ForgettableSpellDeleteMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ForgettableSpellEquipmentSlotsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LeaveDialogMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PauseDialogMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveUseErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveUsedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveUseEndedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveMapUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StatedMapUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveElementUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StatedElementUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ZaapRespawnUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportDestinationsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ZaapDestinationsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new KnownZaapListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportBuddiesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportBuddiesRequestedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportToBuddyOfferMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TeleportToBuddyCloseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SpellVariantActivationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StatsUpgradeResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChallengeTargetsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChallengeInfoMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChallengeTargetUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChallengeResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EntityInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EntitiesInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolSelectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolSelectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolPartyRefreshMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolPartyLostMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolFightPreparationUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementDetailsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementDetailedListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementAlmostFinishedDetailedListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementFinishedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementFinishedInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementRewardSuccessMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementRewardErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendGuildWarnOnAchievementCompleteStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonKeyRingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonKeyRingUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateMapPlayersAgressableStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateSelfAgressableStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlignmentRankUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CompassResetMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CompassUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CompassUpdatePartyMemberMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AtlasPointInformationsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CompassUpdatePvpSeekMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractPartyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractPartyEventMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyModifiableStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDetailsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonDetailsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationCancelledForGuestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyCancelInvitationNotificationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyRefuseInvitationNotificationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyCannotJoinErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyJoinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyNewGuestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyNewMemberMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyUpdateLightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyEntityUpdateLightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberEjectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyLeaderUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyFollowStatusUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyLocateMembersMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyKickedByMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyRestrictedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyDeletedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyLoyaltyStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractPartyMemberInFightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberInStandardFightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberInBreachFightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyNameUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyNameSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderAvailableDungeonsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderListenErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterSuccessMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ContactAddFailureMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SpouseStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintancesListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SpouseInformationsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendAddFailureMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendDeleteResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendWarnOnConnectionStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WarnOnPermaDeathStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendWarnOnLevelGainStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendStatusShareStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredAddFailureMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredDeleteResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceCreationStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceModificationStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceCreationResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInvitedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecruterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecrutedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceJoinedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceGuildLeavingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceLeftMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceMembershipMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceSummaryMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new KohUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AreaFightModificatorUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ClientUIOpenedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ClientUIOpenedByObjectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLogbookInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildSummaryMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildCreationStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildModificationStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildCreationResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInvitedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecruterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecrutedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildJoinedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMemberOnlineStatusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsGeneralMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsMembersMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsMemberUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsPaddocksMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMemberLeavingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLeftMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMembershipMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLevelUpMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInfosUpgradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildHousesInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildHouseUpdateInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildHouseRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPaddockBoughtMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPaddockRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMemberWarnOnConnectionStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMotdMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildMotdSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildBulletinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildBulletinSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFactsErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFactsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInAllianceFactsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildRanksMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceFactsErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceFactsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildVersatileInfoListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlliancePartialListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInsiderInfoMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceMotdMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceMotdSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceBulletinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceBulletinSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractTaxCollectorListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TopTaxCollectorListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorStateUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersJoinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemiesListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemyRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementsOfflineMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new RecruitmentInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildRecruitmentInvalidateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildApplicationDeletedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPlayerApplicationAbstractMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPlayerApplicationInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPlayerNoApplicationInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildApplicationIsAnsweredMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildListApplicationAnswerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildListApplicationModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildApplicationReceivedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ListenersOfSynchronizedStorageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AddListenerOnSynchronizedStorageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new RemoveListenerOnSynchronizedStorageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismSetSabotagedRefusedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefenderAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefenderLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightAttackerAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightAttackerRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismsListUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ChallengeFightJoinRefusedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismInfoCloseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismsInfoValidMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismInfoInValidMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismFightStateUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismSettingsErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestValidatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestObjectiveValidatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestStepValidatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestStepStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestStepInfoMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FollowedQuestsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WatchQuestStepInfoMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WatchQuestListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NotificationListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NotificationByServerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SubscriptionLimitationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SubscriptionZoneMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuestLimitationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GuestModeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ListMapNpcsQuestStatusUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NpcGenericActionFailureMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PortalDialogCreationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NpcDialogCreationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new NpcDialogQuestionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionBasicMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionExtendedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceTaxCollectorDialogQuestionExtendedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlliancePrismDialogQuestionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EntityTalkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobDescriptionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobLevelUpMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobExperienceMultiUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobExperienceUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobExperienceOtherPlayerUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobAllowMultiCraftRequestMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobMultiCraftAvailableSkillsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectorySettingsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobBookSubscriptionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryEntryMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new KamasUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundListAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMultipleMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InventoryContentMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WatchInventoryContentMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarContentMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarAddErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRemoveErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarSwapErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRefreshMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarReplacedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageInventoryContentMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageKamasUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageObjectUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageObjectsUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageObjectRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new StorageObjectsRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SetUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InventoryWeightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectMovementMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectsAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GoldAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectDeletedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectsDeletedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectQuantityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectsQuantityMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectJobAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObtainedItemMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObtainedItemWithBonusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LivingObjectMessageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SymbioticObjectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SymbioticObjectAssociatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WrapperObjectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new WrapperObjectAssociatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MimicryObjectPreviewMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MimicryObjectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MimicryObjectAssociatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InvalidPresetsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ItemForPresetUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetSavedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetSaveErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetDeleteResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetUseResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetUseResultWithMissingIdsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMoneyMovementInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftCountModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectsAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectsRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectsModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectPutInBagMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedFromBagMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedInBagMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeKamaModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangePodsModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeRequestedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeRequestedTradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedWithPodsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedWithStorageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseBuyResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemAddOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemRemoveOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListAddedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseUnsoldItemsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeOfflineSoldItemsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeIsReadyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStoppedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeLeaveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DecraftResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new RecycleResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcTradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkRunesTradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkEvolutiveObjectRecycleTradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EvolutiveObjectRecycleResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkRecycleTradeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcShopMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeOkMultiCraftMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectIdMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectDescMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMagicWithObjectDescMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkHumanVendorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockStartedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementUpdatedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementRemovedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedMountStockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedTaxCollectorShopMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedBidSellerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedBidBuyerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidPriceMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidPriceForSellerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeTypesExchangerDescriptionForUserMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeTypesItemsExchangerDescriptionForUserMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeWeightMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeGuildTaxCollectorGetMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ItemNoMoreAvailableMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBuyOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeSellOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeReplyTaxVendorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeWaitingResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountWithOutPaddockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountStableErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsStableAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsStableBornAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsStableRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountsTakenFromPaddockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountFreeFromPaddockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountSterilizeFromPaddockMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidSearchOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeItemAutoCraftStopedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftWithInformationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCrafterMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCustomerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCrafterJobLevelupMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkJobIndexMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftPaymentModifiedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristicsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectAveragePricesErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectAveragePricesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PurchasableDialogMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountHouseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HousePropertiesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseBuyResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseSellingUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseToSellListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseGuildNoneMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseGuildRightsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockBuyResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockPropertiesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockSellBuyDialogMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameDataPlayFarmObjectAnimationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockToSellListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HavenBagRoomUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HavenBagPackListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EditHavenBagStartMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new EditHavenBagFinishedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HavenBagDailyLoteryMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HavenBagFurnituresMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHavenBagMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HavenBagPermissionsUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InviteInHavenBagClosedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InviteInHavenBagMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new InviteInHavenBagOfferMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountSterilizedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountReleasedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountRenamedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountXpRatioMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountDataMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountDataErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountSetMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountUnSetMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountEquipedErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountRidingMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectRemoveMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectListAddMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new MountEmoteIconUsedOkMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LockableShowCodeDialogMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LockableCodeResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateAbstractMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateHouseDoorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateStorageMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DocumentReadingBeginMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TitlesAndOrnamentsListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TitleGainedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TitleLostMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new OrnamentGainedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new OrnamentLostMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TitleSelectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TitleSelectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new OrnamentSelectedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new OrnamentSelectErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ContactLookMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ContactLookErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SocialNoticeMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BulletinMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new SocialNoticeSetErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccessoryPreviewErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AccessoryPreviewMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiBufferListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiConfirmationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiValidationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiBuyValidationMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiApiKeyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiShopApiKeyMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new FinishMoveListMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntShowLegendaryUIMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntRequestAnswerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntFinishedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerFailedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntFlagRequestAnswerMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntAvailableRetryCountUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachStateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachCharactersMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachBonusMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachBudgetMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachSavedMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachBranchesMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachRewardsMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachRewardBoughtMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachInvitationOfferMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachInvitationResponseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachInvitationCloseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachKickResponseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AnomalySubareaInformationResponseMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlignmentWarEffortProgressionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterAlignmentWarEffortProgressionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlignmentWarEffortDonatePreviewMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new AlignmentWarEffortDonationResultMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiTokenMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiAuthErrorMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new HaapiSessionMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DebtsUpdateMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new DebtsDeleteMessage(),true,true);
            StoreDataManager.getInstance().registerClass(new ActivitySuggestionsMessage(),true,true);
        }
        
        public function parse(input:ICustomDataInput, messageId:uint, messageLength:uint) : INetworkMessage
        {
            var messageType:Class = _messagesTypes[messageId];
            if(!messageType)
            {
                _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
                return null;
            }
            var message:INetworkMessage = new messageType();
            message.unpack(input,messageLength);
            message.unpacked = true;
            return message;
        }
        
        public function parseAsync(input:ICustomDataInput, messageId:uint, messageLength:uint, callback:Function) : INetworkMessage
        {
            var messageType:Class = _messagesTypes[messageId];
            if(!messageType)
            {
                _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
                return null;
            }
            var message:INetworkMessage = new messageType();
            message.unpacked = false;
            callback(message,message.unpackAsync(input,messageLength));
            return message;
        }
        
        public function getUnpackMode(messageId:uint) : uint
        {
            return messageId in _unpackModes ? uint(_unpackModes[messageId]) : uint(UnpackMode.DEFAULT);
        }
    }
}
