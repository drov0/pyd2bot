package com.ankamagames.dofus.network
{
    import com.ankamagames.dofus.network.types.common.AbstractPlayerSearchInformation;
    import com.ankamagames.dofus.network.types.common.PlayerSearchCharacterNameInformation;
    import com.ankamagames.dofus.network.types.common.PlayerSearchTagInformation;
    import com.ankamagames.dofus.network.types.common.basic.StatisticData;
    import com.ankamagames.dofus.network.types.common.basic.StatisticDataBoolean;
    import com.ankamagames.dofus.network.types.common.basic.StatisticDataByte;
    import com.ankamagames.dofus.network.types.common.basic.StatisticDataInt;
    import com.ankamagames.dofus.network.types.common.basic.StatisticDataShort;
    import com.ankamagames.dofus.network.types.common.basic.StatisticDataString;
    import com.ankamagames.dofus.network.types.game.achievement.AchievementAchieved;
    import com.ankamagames.dofus.network.types.game.achievement.AchievementAchievedRewardable;
    import com.ankamagames.dofus.network.types.game.actions.fight.AbstractFightDispellableEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostStateEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostWeaponDamagesEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellBoostEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellImmunityEffect;
    import com.ankamagames.dofus.network.types.game.actions.fight.FightTriggeredEffect;
    import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstant;
    import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantInteger;
    import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantLong;
    import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantString;
    import com.ankamagames.dofus.network.types.game.character.CharacterMinimalAllianceInformations;
    import com.ankamagames.dofus.network.types.game.character.CharacterMinimalGuildInformations;
    import com.ankamagames.dofus.network.types.game.character.CharacterMinimalPlusLookAndGradeInformations;
    import com.ankamagames.dofus.network.types.game.character.CharacterMinimalPlusLookInformations;
    import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristic;
    import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicDetailed;
    import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicValue;
    import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterUsableCharacteristicDetailed;
    import com.ankamagames.dofus.network.types.game.character.choice.CharacterBaseInformations;
    import com.ankamagames.dofus.network.types.game.character.choice.CharacterHardcoreOrEpicInformations;
    import com.ankamagames.dofus.network.types.game.character.debt.DebtInformation;
    import com.ankamagames.dofus.network.types.game.character.debt.KamaDebtInformation;
    import com.ankamagames.dofus.network.types.game.character.status.PlayerStatus;
    import com.ankamagames.dofus.network.types.game.character.status.PlayerStatusExtended;
    import com.ankamagames.dofus.network.types.game.context.EntityDispositionInformations;
    import com.ankamagames.dofus.network.types.game.context.FightEntityDispositionInformations;
    import com.ankamagames.dofus.network.types.game.context.GameContextActorInformations;
    import com.ankamagames.dofus.network.types.game.context.GameContextActorPositionInformations;
    import com.ankamagames.dofus.network.types.game.context.GameRolePlayTaxCollectorInformations;
    import com.ankamagames.dofus.network.types.game.context.IdentifiedEntityDispositionInformations;
    import com.ankamagames.dofus.network.types.game.context.MapCoordinates;
    import com.ankamagames.dofus.network.types.game.context.MapCoordinatesAndId;
    import com.ankamagames.dofus.network.types.game.context.MapCoordinatesExtended;
    import com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticExtendedInformations;
    import com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.BaseSpawnMonsterInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.FightAllianceTeamInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultAdditionalData;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultExperienceData;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultFighterListEntry;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultListEntry;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultMutantListEntry;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultPlayerListEntry;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultPvpData;
    import com.ankamagames.dofus.network.types.game.context.fight.FightResultTaxCollectorListEntry;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberCharacterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberEntityInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberMonsterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberTaxCollectorInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberWithAllianceCharacterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameContextBasicSpawnInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.GameContextSummonsInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightAIInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacteristics;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightEntityInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterEntityLightInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterLightInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterMonsterLightInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedLightInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterTaxCollectorLightInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterWithAlignmentInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightMutantInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.GameFightTaxCollectorInformations;
    import com.ankamagames.dofus.network.types.game.context.fight.SpawnCharacterInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.SpawnCompanionInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.SpawnInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.SpawnMonsterInformation;
    import com.ankamagames.dofus.network.types.game.context.fight.SpawnScaledMonsterInformation;
    import com.ankamagames.dofus.network.types.game.context.roleplay.AllianceInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.BasicAllianceInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.BasicGuildInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.BasicNamedAllianceInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayActorInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayCharacterInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterWaveInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayHumanoidInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMerchantInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMountInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMutantInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNamedActorInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcWithQuestInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPortalInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPrismInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayTreasureHintInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformationsWithAlternatives;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GuildInAllianceInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.GuildInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOption;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionAlliance;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionEmote;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionFollowers;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionGuild;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionObjectUse;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionOrnament;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionSkillUse;
    import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionTitle;
    import com.ankamagames.dofus.network.types.game.context.roleplay.breach.BreachBranch;
    import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedBreachBranch;
    import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedLockedBreachBranch;
    import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyInvitationMemberInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberArenaInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityBaseInformation;
    import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityMemberInformation;
    import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveDetailedInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformations;
    import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformationsWithCompletion;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.PortalInformation;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStep;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepDig;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFight;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirection;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToHint;
    import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToPOI;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffect;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectCreature;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDate;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDice;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDuration;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectInteger;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectLadder;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMinMax;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMount;
    import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectString;
    import com.ankamagames.dofus.network.types.game.friend.AcquaintanceInformation;
    import com.ankamagames.dofus.network.types.game.friend.AcquaintanceOnlineInformation;
    import com.ankamagames.dofus.network.types.game.friend.FriendInformations;
    import com.ankamagames.dofus.network.types.game.friend.FriendOnlineInformations;
    import com.ankamagames.dofus.network.types.game.friend.FriendSpouseInformations;
    import com.ankamagames.dofus.network.types.game.friend.FriendSpouseOnlineInformations;
    import com.ankamagames.dofus.network.types.game.friend.IgnoredInformations;
    import com.ankamagames.dofus.network.types.game.friend.IgnoredOnlineInformations;
    import com.ankamagames.dofus.network.types.game.guild.logbook.GuildLogbookEntryBasicInformation;
    import com.ankamagames.dofus.network.types.game.guild.logbook.chest.GuildLogbookChestActivity;
    import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildLevelUpActivity;
    import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPaddockActivity;
    import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerFlowActivity;
    import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerRankUpdateActivity;
    import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildRankActivity;
    import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorComplementaryInformations;
    import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorGuildInformations;
    import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorInformations;
    import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorLootInformations;
    import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorWaitingForHelpInformations;
    import com.ankamagames.dofus.network.types.game.house.AccountHouseInformations;
    import com.ankamagames.dofus.network.types.game.house.HouseGuildedInformations;
    import com.ankamagames.dofus.network.types.game.house.HouseInformations;
    import com.ankamagames.dofus.network.types.game.house.HouseInformationsForGuild;
    import com.ankamagames.dofus.network.types.game.house.HouseInformationsInside;
    import com.ankamagames.dofus.network.types.game.house.HouseInstanceInformations;
    import com.ankamagames.dofus.network.types.game.house.HouseOnMapInformations;
    import com.ankamagames.dofus.network.types.game.idol.Idol;
    import com.ankamagames.dofus.network.types.game.idol.PartyIdol;
    import com.ankamagames.dofus.network.types.game.interactive.InteractiveElement;
    import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementNamedSkill;
    import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementSkill;
    import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementWithAgeBonus;
    import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescription;
    import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCollect;
    import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCraft;
    import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionTimed;
    import com.ankamagames.dofus.network.types.game.mount.UpdateMountBooleanCharacteristic;
    import com.ankamagames.dofus.network.types.game.mount.UpdateMountCharacteristic;
    import com.ankamagames.dofus.network.types.game.mount.UpdateMountIntegerCharacteristic;
    import com.ankamagames.dofus.network.types.game.paddock.PaddockBuyableInformations;
    import com.ankamagames.dofus.network.types.game.paddock.PaddockGuildedInformations;
    import com.ankamagames.dofus.network.types.game.presets.EntitiesPreset;
    import com.ankamagames.dofus.network.types.game.presets.ForgettableSpellsPreset;
    import com.ankamagames.dofus.network.types.game.presets.FullStatsPreset;
    import com.ankamagames.dofus.network.types.game.presets.IconNamedPreset;
    import com.ankamagames.dofus.network.types.game.presets.IdolsPreset;
    import com.ankamagames.dofus.network.types.game.presets.ItemsPreset;
    import com.ankamagames.dofus.network.types.game.presets.Preset;
    import com.ankamagames.dofus.network.types.game.presets.PresetsContainerPreset;
    import com.ankamagames.dofus.network.types.game.presets.SpellsPreset;
    import com.ankamagames.dofus.network.types.game.presets.StatsPreset;
    import com.ankamagames.dofus.network.types.game.prism.AllianceInsiderPrismInformation;
    import com.ankamagames.dofus.network.types.game.prism.AlliancePrismInformation;
    import com.ankamagames.dofus.network.types.game.prism.PrismGeolocalizedInformation;
    import com.ankamagames.dofus.network.types.game.prism.PrismInformation;
    import com.ankamagames.dofus.network.types.game.prism.PrismSubareaEmptyInfo;
    import com.ankamagames.dofus.network.types.game.shortcut.Shortcut;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEmote;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEntitiesPreset;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObject;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectIdolsPreset;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectItem;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectPreset;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSmiley;
    import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSpell;
    import com.ankamagames.dofus.network.types.game.social.AbstractSocialGroupInfos;
    import com.ankamagames.dofus.network.types.game.social.AllianceFactSheetInformations;
    import com.ankamagames.dofus.network.types.game.social.AlliancedGuildFactSheetInformations;
    import com.ankamagames.dofus.network.types.game.social.GuildFactSheetInformations;
    import com.ankamagames.dofus.network.types.game.social.GuildInAllianceVersatileInformations;
    import com.ankamagames.dofus.network.types.game.social.GuildInsiderFactSheetInformations;
    import com.ankamagames.dofus.network.types.game.social.GuildVersatileInformations;
    import com.ankamagames.jerakine.managers.StoreDataManager;
    import flash.utils.Dictionary;
    
    public class ProtocolTypeManager
    {
        
        private static const _typesTypes:Dictionary = new Dictionary();
        
        {
            _typesTypes[8692] = CharacterMinimalPlusLookInformations;
            _typesTypes[274] = CharacterBaseInformations;
            _typesTypes[8030] = PartyMemberInformations;
            _typesTypes[3354] = PartyMemberArenaInformations;
            _typesTypes[3300] = PartyInvitationMemberInformations;
            _typesTypes[7924] = CharacterHardcoreOrEpicInformations;
            _typesTypes[5827] = CharacterMinimalGuildInformations;
            _typesTypes[441] = CharacterMinimalAllianceInformations;
            _typesTypes[8617] = CharacterMinimalPlusLookAndGradeInformations;
            _typesTypes[274] = CharacterBaseInformations;
            _typesTypes[8030] = PartyMemberInformations;
            _typesTypes[3354] = PartyMemberArenaInformations;
            _typesTypes[3300] = PartyInvitationMemberInformations;
            _typesTypes[7924] = CharacterHardcoreOrEpicInformations;
            _typesTypes[7343] = EntityDispositionInformations;
            _typesTypes[8114] = IdentifiedEntityDispositionInformations;
            _typesTypes[1731] = FightEntityDispositionInformations;
            _typesTypes[1859] = AbstractSocialGroupInfos;
            _typesTypes[9434] = BasicGuildInformations;
            _typesTypes[2963] = GuildInformations;
            _typesTypes[6336] = GuildFactSheetInformations;
            _typesTypes[6777] = GuildInsiderFactSheetInformations;
            _typesTypes[2291] = GuildInAllianceInformations;
            _typesTypes[5844] = AlliancedGuildFactSheetInformations;
            _typesTypes[8754] = BasicAllianceInformations;
            _typesTypes[7772] = BasicNamedAllianceInformations;
            _typesTypes[8078] = AllianceInformations;
            _typesTypes[9010] = AllianceFactSheetInformations;
            _typesTypes[8092] = GuildVersatileInformations;
            _typesTypes[249] = GuildInAllianceVersatileInformations;
            _typesTypes[6336] = GuildFactSheetInformations;
            _typesTypes[6777] = GuildInsiderFactSheetInformations;
            _typesTypes[9010] = AllianceFactSheetInformations;
            _typesTypes[1480] = PrismSubareaEmptyInfo;
            _typesTypes[2402] = PrismGeolocalizedInformation;
            _typesTypes[3978] = PrismInformation;
            _typesTypes[8615] = AlliancePrismInformation;
            _typesTypes[9181] = AllianceInsiderPrismInformation;
            _typesTypes[1428] = CharacterCharacteristic;
            _typesTypes[732] = CharacterCharacteristicDetailed;
            _typesTypes[8440] = CharacterUsableCharacteristicDetailed;
            _typesTypes[4332] = CharacterCharacteristicValue;
            _typesTypes[2614] = FightTeamMemberInformations;
            _typesTypes[820] = FightTeamMemberCharacterInformations;
            _typesTypes[8938] = FightTeamMemberWithAllianceCharacterInformations;
            _typesTypes[4582] = FightTeamMemberTaxCollectorInformations;
            _typesTypes[4241] = FightTeamMemberMonsterInformations;
            _typesTypes[2808] = FightTeamMemberEntityInformation;
            _typesTypes[1646] = FightTeamInformations;
            _typesTypes[5244] = FightAllianceTeamInformations;
            _typesTypes[8549] = GameFightCharacteristics;
            _typesTypes[7411] = FightResultListEntry;
            _typesTypes[3078] = FightResultFighterListEntry;
            _typesTypes[5814] = FightResultTaxCollectorListEntry;
            _typesTypes[8197] = FightResultPlayerListEntry;
            _typesTypes[7912] = FightResultMutantListEntry;
            _typesTypes[5071] = FightResultAdditionalData;
            _typesTypes[5343] = FightResultPvpData;
            _typesTypes[504] = FightResultExperienceData;
            _typesTypes[449] = AbstractFightDispellableEffect;
            _typesTypes[6350] = FightTemporaryBoostEffect;
            _typesTypes[1092] = FightTemporaryBoostStateEffect;
            _typesTypes[6689] = FightTemporarySpellBoostEffect;
            _typesTypes[1400] = FightTemporaryBoostWeaponDamagesEffect;
            _typesTypes[7435] = FightTemporarySpellImmunityEffect;
            _typesTypes[3761] = FightTriggeredEffect;
            _typesTypes[6436] = ObjectEffect;
            _typesTypes[9809] = ObjectEffectInteger;
            _typesTypes[3670] = ObjectEffectCreature;
            _typesTypes[4603] = ObjectEffectLadder;
            _typesTypes[9969] = ObjectEffectMinMax;
            _typesTypes[6628] = ObjectEffectDuration;
            _typesTypes[4631] = ObjectEffectString;
            _typesTypes[1221] = ObjectEffectDice;
            _typesTypes[3587] = ObjectEffectDate;
            _typesTypes[8097] = ObjectEffectMount;
            _typesTypes[4815] = UpdateMountCharacteristic;
            _typesTypes[2802] = UpdateMountBooleanCharacteristic;
            _typesTypes[5702] = UpdateMountIntegerCharacteristic;
            _typesTypes[6217] = Shortcut;
            _typesTypes[7459] = ShortcutObject;
            _typesTypes[7399] = ShortcutObjectPreset;
            _typesTypes[4044] = ShortcutObjectIdolsPreset;
            _typesTypes[5481] = ShortcutObjectItem;
            _typesTypes[7246] = ShortcutSpell;
            _typesTypes[4454] = ShortcutSmiley;
            _typesTypes[2854] = ShortcutEmote;
            _typesTypes[8994] = ShortcutEntitiesPreset;
            _typesTypes[3600] = Idol;
            _typesTypes[8705] = PartyIdol;
            _typesTypes[8705] = PartyIdol;
            _typesTypes[7731] = AchievementAchieved;
            _typesTypes[2049] = AchievementAchievedRewardable;
            _typesTypes[9802] = IgnoredInformations;
            _typesTypes[336] = IgnoredOnlineInformations;
            _typesTypes[6887] = FriendInformations;
            _typesTypes[587] = FriendOnlineInformations;
            _typesTypes[6769] = AcquaintanceInformation;
            _typesTypes[1336] = AcquaintanceOnlineInformation;
            _typesTypes[4037] = FriendSpouseInformations;
            _typesTypes[2556] = FriendSpouseOnlineInformations;
            _typesTypes[2151] = InteractiveElementSkill;
            _typesTypes[1044] = InteractiveElementNamedSkill;
            _typesTypes[5184] = InteractiveElement;
            _typesTypes[7517] = InteractiveElementWithAgeBonus;
            _typesTypes[8030] = PartyMemberInformations;
            _typesTypes[3354] = PartyMemberArenaInformations;
            _typesTypes[3300] = PartyInvitationMemberInformations;
            _typesTypes[8371] = PartyEntityBaseInformation;
            _typesTypes[9852] = PartyEntityMemberInformation;
            _typesTypes[8670] = SkillActionDescription;
            _typesTypes[2744] = SkillActionDescriptionTimed;
            _typesTypes[8877] = SkillActionDescriptionCollect;
            _typesTypes[8036] = SkillActionDescriptionCraft;
            _typesTypes[8980] = HouseInformations;
            _typesTypes[7056] = AccountHouseInformations;
            _typesTypes[4549] = HouseInformationsInside;
            _typesTypes[7318] = HouseInformationsForGuild;
            _typesTypes[1637] = HouseOnMapInformations;
            _typesTypes[8807] = HouseInstanceInformations;
            _typesTypes[8587] = HouseGuildedInformations;
            _typesTypes[3517] = PaddockBuyableInformations;
            _typesTypes[902] = PaddockGuildedInformations;
            _typesTypes[837] = GameContextActorPositionInformations;
            _typesTypes[496] = GameContextActorInformations;
            _typesTypes[9939] = GameFightFighterInformations;
            _typesTypes[9278] = GameFightAIInformations;
            _typesTypes[5276] = GameFightMonsterInformations;
            _typesTypes[7347] = GameFightMonsterWithAlignmentInformations;
            _typesTypes[9657] = GameFightTaxCollectorInformations;
            _typesTypes[1921] = GameFightFighterNamedInformations;
            _typesTypes[9644] = GameFightCharacterInformations;
            _typesTypes[5207] = GameFightMutantInformations;
            _typesTypes[7430] = GameFightEntityInformation;
            _typesTypes[9151] = GameRolePlayActorInformations;
            _typesTypes[4661] = GameRolePlayNamedActorInformations;
            _typesTypes[8536] = GameRolePlayHumanoidInformations;
            _typesTypes[4083] = GameRolePlayMutantInformations;
            _typesTypes[2594] = GameRolePlayCharacterInformations;
            _typesTypes[8143] = GameRolePlayMountInformations;
            _typesTypes[6256] = GameRolePlayMerchantInformations;
            _typesTypes[4478] = GameRolePlayNpcInformations;
            _typesTypes[3964] = GameRolePlayNpcWithQuestInformations;
            _typesTypes[9798] = GameRolePlayGroupMonsterInformations;
            _typesTypes[2920] = GameRolePlayGroupMonsterWaveInformations;
            _typesTypes[3489] = GameRolePlayTreasureHintInformations;
            _typesTypes[312] = GameRolePlayTaxCollectorInformations;
            _typesTypes[4908] = GameRolePlayPrismInformations;
            _typesTypes[728] = GameRolePlayPortalInformations;
            _typesTypes[496] = GameContextActorInformations;
            _typesTypes[9939] = GameFightFighterInformations;
            _typesTypes[9278] = GameFightAIInformations;
            _typesTypes[5276] = GameFightMonsterInformations;
            _typesTypes[7347] = GameFightMonsterWithAlignmentInformations;
            _typesTypes[9657] = GameFightTaxCollectorInformations;
            _typesTypes[1921] = GameFightFighterNamedInformations;
            _typesTypes[9644] = GameFightCharacterInformations;
            _typesTypes[5207] = GameFightMutantInformations;
            _typesTypes[7430] = GameFightEntityInformation;
            _typesTypes[9151] = GameRolePlayActorInformations;
            _typesTypes[4661] = GameRolePlayNamedActorInformations;
            _typesTypes[8536] = GameRolePlayHumanoidInformations;
            _typesTypes[4083] = GameRolePlayMutantInformations;
            _typesTypes[2594] = GameRolePlayCharacterInformations;
            _typesTypes[8143] = GameRolePlayMountInformations;
            _typesTypes[6256] = GameRolePlayMerchantInformations;
            _typesTypes[4478] = GameRolePlayNpcInformations;
            _typesTypes[3964] = GameRolePlayNpcWithQuestInformations;
            _typesTypes[9798] = GameRolePlayGroupMonsterInformations;
            _typesTypes[2920] = GameRolePlayGroupMonsterWaveInformations;
            _typesTypes[3489] = GameRolePlayTreasureHintInformations;
            _typesTypes[312] = GameRolePlayTaxCollectorInformations;
            _typesTypes[4908] = GameRolePlayPrismInformations;
            _typesTypes[728] = GameRolePlayPortalInformations;
            _typesTypes[9151] = GameRolePlayActorInformations;
            _typesTypes[4661] = GameRolePlayNamedActorInformations;
            _typesTypes[8536] = GameRolePlayHumanoidInformations;
            _typesTypes[4083] = GameRolePlayMutantInformations;
            _typesTypes[2594] = GameRolePlayCharacterInformations;
            _typesTypes[8143] = GameRolePlayMountInformations;
            _typesTypes[6256] = GameRolePlayMerchantInformations;
            _typesTypes[4478] = GameRolePlayNpcInformations;
            _typesTypes[3964] = GameRolePlayNpcWithQuestInformations;
            _typesTypes[9798] = GameRolePlayGroupMonsterInformations;
            _typesTypes[2920] = GameRolePlayGroupMonsterWaveInformations;
            _typesTypes[3489] = GameRolePlayTreasureHintInformations;
            _typesTypes[312] = GameRolePlayTaxCollectorInformations;
            _typesTypes[4908] = GameRolePlayPrismInformations;
            _typesTypes[728] = GameRolePlayPortalInformations;
            _typesTypes[6710] = HumanInformations;
            _typesTypes[9598] = HumanOption;
            _typesTypes[2949] = HumanOptionObjectUse;
            _typesTypes[5796] = HumanOptionAlliance;
            _typesTypes[4671] = HumanOptionGuild;
            _typesTypes[7721] = HumanOptionOrnament;
            _typesTypes[8982] = HumanOptionEmote;
            _typesTypes[9867] = HumanOptionTitle;
            _typesTypes[872] = HumanOptionSkillUse;
            _typesTypes[4051] = HumanOptionFollowers;
            _typesTypes[5445] = TaxCollectorStaticInformations;
            _typesTypes[3527] = TaxCollectorStaticExtendedInformations;
            _typesTypes[9106] = TaxCollectorInformations;
            _typesTypes[4786] = TaxCollectorComplementaryInformations;
            _typesTypes[9570] = TaxCollectorGuildInformations;
            _typesTypes[7909] = TaxCollectorLootInformations;
            _typesTypes[8138] = TaxCollectorWaitingForHelpInformations;
            _typesTypes[9328] = GroupMonsterStaticInformations;
            _typesTypes[9782] = GroupMonsterStaticInformationsWithAlternatives;
            _typesTypes[5113] = QuestActiveInformations;
            _typesTypes[5514] = QuestActiveDetailedInformations;
            _typesTypes[3662] = QuestObjectiveInformations;
            _typesTypes[9258] = QuestObjectiveInformationsWithCompletion;
            _typesTypes[9583] = SpawnInformation;
            _typesTypes[7114] = BaseSpawnMonsterInformation;
            _typesTypes[974] = SpawnScaledMonsterInformation;
            _typesTypes[2329] = SpawnMonsterInformation;
            _typesTypes[281] = SpawnCharacterInformation;
            _typesTypes[8111] = SpawnCompanionInformation;
            _typesTypes[9055] = GameContextBasicSpawnInformation;
            _typesTypes[8032] = GameContextSummonsInformation;
            _typesTypes[9939] = GameFightFighterInformations;
            _typesTypes[9278] = GameFightAIInformations;
            _typesTypes[5276] = GameFightMonsterInformations;
            _typesTypes[7347] = GameFightMonsterWithAlignmentInformations;
            _typesTypes[9657] = GameFightTaxCollectorInformations;
            _typesTypes[1921] = GameFightFighterNamedInformations;
            _typesTypes[9644] = GameFightCharacterInformations;
            _typesTypes[5207] = GameFightMutantInformations;
            _typesTypes[7430] = GameFightEntityInformation;
            _typesTypes[1522] = GameFightFighterLightInformations;
            _typesTypes[7741] = GameFightFighterMonsterLightInformations;
            _typesTypes[8706] = GameFightFighterNamedLightInformations;
            _typesTypes[6313] = GameFightFighterTaxCollectorLightInformations;
            _typesTypes[2885] = GameFightFighterEntityLightInformation;
            _typesTypes[1257] = MapCoordinates;
            _typesTypes[6994] = MapCoordinatesAndId;
            _typesTypes[7510] = MapCoordinatesExtended;
            _typesTypes[7169] = Preset;
            _typesTypes[2058] = PresetsContainerPreset;
            _typesTypes[2175] = IconNamedPreset;
            _typesTypes[9284] = SpellsPreset;
            _typesTypes[6865] = ForgettableSpellsPreset;
            _typesTypes[5300] = StatsPreset;
            _typesTypes[3928] = IdolsPreset;
            _typesTypes[6697] = EntitiesPreset;
            _typesTypes[1363] = FullStatsPreset;
            _typesTypes[7569] = ItemsPreset;
            _typesTypes[8311] = TreasureHuntStep;
            _typesTypes[1842] = TreasureHuntStepFollowDirectionToPOI;
            _typesTypes[9095] = TreasureHuntStepDig;
            _typesTypes[7385] = TreasureHuntStepFight;
            _typesTypes[9710] = TreasureHuntStepFollowDirectionToHint;
            _typesTypes[4787] = TreasureHuntStepFollowDirection;
            _typesTypes[4417] = AbstractPlayerSearchInformation;
            _typesTypes[7944] = PlayerSearchTagInformation;
            _typesTypes[2349] = PlayerSearchCharacterNameInformation;
            _typesTypes[2608] = PortalInformation;
            _typesTypes[2412] = BreachBranch;
            _typesTypes[9084] = ExtendedBreachBranch;
            _typesTypes[138] = ExtendedLockedBreachBranch;
            _typesTypes[9084] = ExtendedBreachBranch;
            _typesTypes[138] = ExtendedLockedBreachBranch;
            _typesTypes[8844] = PlayerStatus;
            _typesTypes[6073] = PlayerStatusExtended;
            _typesTypes[6858] = ServerSessionConstant;
            _typesTypes[6095] = ServerSessionConstantString;
            _typesTypes[4312] = ServerSessionConstantInteger;
            _typesTypes[4347] = ServerSessionConstantLong;
            _typesTypes[5607] = StatisticData;
            _typesTypes[6578] = StatisticDataInt;
            _typesTypes[4944] = StatisticDataBoolean;
            _typesTypes[2823] = StatisticDataShort;
            _typesTypes[4472] = StatisticDataString;
            _typesTypes[2850] = StatisticDataByte;
            _typesTypes[4203] = DebtInformation;
            _typesTypes[4306] = KamaDebtInformation;
            _typesTypes[3274] = GuildLogbookEntryBasicInformation;
            _typesTypes[9004] = GuildRankActivity;
            _typesTypes[6214] = GuildPlayerRankUpdateActivity;
            _typesTypes[6293] = GuildLogbookChestActivity;
            _typesTypes[3071] = GuildLevelUpActivity;
            _typesTypes[8134] = GuildPaddockActivity;
            _typesTypes[1530] = GuildPlayerFlowActivity;
        }
        
        public function ProtocolTypeManager()
        {
            super();
        }
        
        public static function getInstance(base:Class, typeId:uint) : *
        {
            var objType:Class = _typesTypes[typeId];
            if(!objType)
            {
                throw new Error("Type with id " + typeId + " is unknown.");
            }
            var obj:* = new objType();
            if(!(obj is base))
            {
                throw new Error("Type " + typeId + " is not a " + base + ".");
            }
            return obj;
        }
        
        public static function register() : void
        {
            StoreDataManager.getInstance().registerClass(new CharacterMinimalPlusLookInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterBaseInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterHardcoreOrEpicInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterMinimalGuildInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterMinimalAllianceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterMinimalPlusLookAndGradeInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterBaseInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterHardcoreOrEpicInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new EntityDispositionInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new IdentifiedEntityDispositionInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightEntityDispositionInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractSocialGroupInfos(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicGuildInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInAllianceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AlliancedGuildFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicAllianceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new BasicNamedAllianceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildVersatileInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInAllianceVersatileInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismSubareaEmptyInfo(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismGeolocalizedInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new PrismInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new AlliancePrismInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new AllianceInsiderPrismInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCharacteristic(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCharacteristicDetailed(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterUsableCharacteristicDetailed(),true,true);
            StoreDataManager.getInstance().registerClass(new CharacterCharacteristicValue(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberWithAllianceCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamMemberEntityInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTeamInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FightAllianceTeamInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightCharacteristics(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultListEntry(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultFighterListEntry(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultTaxCollectorListEntry(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultPlayerListEntry(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultMutantListEntry(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultAdditionalData(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultPvpData(),true,true);
            StoreDataManager.getInstance().registerClass(new FightResultExperienceData(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractFightDispellableEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTemporaryBoostEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTemporaryBoostStateEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTemporarySpellBoostEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTemporaryBoostWeaponDamagesEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTemporarySpellImmunityEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new FightTriggeredEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffect(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectInteger(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectCreature(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectLadder(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectMinMax(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectDuration(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectString(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectDice(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectDate(),true,true);
            StoreDataManager.getInstance().registerClass(new ObjectEffectMount(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristic(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateMountBooleanCharacteristic(),true,true);
            StoreDataManager.getInstance().registerClass(new UpdateMountIntegerCharacteristic(),true,true);
            StoreDataManager.getInstance().registerClass(new Shortcut(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutObject(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutObjectPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutObjectIdolsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutObjectItem(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutSpell(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutSmiley(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutEmote(),true,true);
            StoreDataManager.getInstance().registerClass(new ShortcutEntitiesPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new Idol(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyIdol(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyIdol(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementAchieved(),true,true);
            StoreDataManager.getInstance().registerClass(new AchievementAchievedRewardable(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new IgnoredOnlineInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendOnlineInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceOnlineInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendSpouseInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new FriendSpouseOnlineInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveElementSkill(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveElementNamedSkill(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveElement(),true,true);
            StoreDataManager.getInstance().registerClass(new InteractiveElementWithAgeBonus(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyEntityBaseInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new PartyEntityMemberInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new SkillActionDescription(),true,true);
            StoreDataManager.getInstance().registerClass(new SkillActionDescriptionTimed(),true,true);
            StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCollect(),true,true);
            StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCraft(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new AccountHouseInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseInformationsInside(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseInformationsForGuild(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseOnMapInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseInstanceInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new HouseGuildedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockBuyableInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new PaddockGuildedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextActorPositionInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOption(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionObjectUse(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionAlliance(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionGuild(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionOrnament(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionEmote(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionTitle(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionSkillUse(),true,true);
            StoreDataManager.getInstance().registerClass(new HumanOptionFollowers(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorStaticInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorStaticExtendedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorComplementaryInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorGuildInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorLootInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorWaitingForHelpInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformationsWithAlternatives(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestActiveInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestActiveDetailedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestObjectiveInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new QuestObjectiveInformationsWithCompletion(),true,true);
            StoreDataManager.getInstance().registerClass(new SpawnInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new BaseSpawnMonsterInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new SpawnScaledMonsterInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new SpawnMonsterInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new SpawnCharacterInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new SpawnCompanionInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextBasicSpawnInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameContextSummonsInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterLightInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterMonsterLightInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterNamedLightInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterTaxCollectorLightInformations(),true,true);
            StoreDataManager.getInstance().registerClass(new GameFightFighterEntityLightInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new MapCoordinates(),true,true);
            StoreDataManager.getInstance().registerClass(new MapCoordinatesAndId(),true,true);
            StoreDataManager.getInstance().registerClass(new MapCoordinatesExtended(),true,true);
            StoreDataManager.getInstance().registerClass(new Preset(),true,true);
            StoreDataManager.getInstance().registerClass(new PresetsContainerPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new IconNamedPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new SpellsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new ForgettableSpellsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new StatsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new IdolsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new EntitiesPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new FullStatsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new ItemsPreset(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStep(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToPOI(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStepDig(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStepFight(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToHint(),true,true);
            StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirection(),true,true);
            StoreDataManager.getInstance().registerClass(new AbstractPlayerSearchInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerSearchTagInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerSearchCharacterNameInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new PortalInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new BreachBranch(),true,true);
            StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
            StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
            StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
            StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerStatus(),true,true);
            StoreDataManager.getInstance().registerClass(new PlayerStatusExtended(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSessionConstant(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSessionConstantString(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSessionConstantInteger(),true,true);
            StoreDataManager.getInstance().registerClass(new ServerSessionConstantLong(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticData(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticDataInt(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticDataBoolean(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticDataShort(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticDataString(),true,true);
            StoreDataManager.getInstance().registerClass(new StatisticDataByte(),true,true);
            StoreDataManager.getInstance().registerClass(new DebtInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new KamaDebtInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLogbookEntryBasicInformation(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildRankActivity(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPlayerRankUpdateActivity(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLogbookChestActivity(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildLevelUpActivity(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPaddockActivity(),true,true);
            StoreDataManager.getInstance().registerClass(new GuildPlayerFlowActivity(),true,true);
        }
    }
}
